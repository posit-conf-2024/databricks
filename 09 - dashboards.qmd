---
title: "Dashboards"
---

## 01 - Preview app

*Try out the finalized Shiny app*

1. Open the *example-app.R* file

## Catch up 

```{r}
library(dplyr)
library(dbplyr)
library(DBI)

con <- dbConnect(
  odbc::databricks(),
  HTTPPath = "/sql/1.0/warehouses/300bd24ba12adf8e"
)

orders <- tbl(con, I("workshops.tpch.orders"))
customers <- tbl(con, I("workshops.tpch.customer"))
nation <- tbl(con, I("workshops.tpch.nation"))

prep_orders <- orders |> 
  left_join(customers, by = c("o_custkey" = "c_custkey")) |> 
  left_join(nation, by = c("c_nationkey" = "n_nationkey")) |> 
  mutate(
    order_year = year(o_orderdate), 
    order_month = month(o_orderdate)
  ) |> 
  rename(customer = o_custkey) |> 
  select(-ends_with("comment"),  -ends_with("key"))
```

## 02 - Data driven dropdown

1. Load the `shiny` library

```{r}

```

2. Run the following code to see the "stub" Shiny app

```{r}
shinyApp(
  ui = fluidPage(
    selectInput("country", "Country:", choices = "FRANCE", selected = "FRANCE"),
    plotOutput("sales_plot")
  ),
  server = function(input, output) {
    output$sales_plot <- renderPlot({
      # Your code here
    })
  },
  options = list(height = 200)
)
```

3. Retrieve the country names from `nation` into a character vector. Save the
values to a variable called `countries`

```{r}

```

4. Preview `countries`

```{r}

```

5. Replace the values of `choices` in the Shiny app. Now use `countries` as its
source. Preview the app, the drop-down should now have the 25 countries as
options

```{r}

```

## 03 - Adding the plot
*Port the code that creates the plot from the database*

1. Load the `ggplot2` library

```{r}

```

2. Insert the full code that makes the country sales plot, the one in previous
section. It should include the code that creates the local data, and the one
that creates the plot itself. Place them in the area that says *# Your code here*.
Make sure to replace, `country`, with `input$country`. Preview the app.

```{r}

```

3. Prefix `!!` to the `input$country` entry where we create the `sales_by_year`
variable. Preview the app.

```{r}

```

## 04 - Interactive plots
*Using `ggiraph` to add plot interactivity*

1. Load the `ggiraph` library

```{r}

```

2. In the Shiny app's code, replace:
- `plotOUtput()` with `girafeOutput()`
- `renderPlot()` with `renderGirafe()`
- `geom_col()` with `geom_col_interactive()` 

```{r}

```

3. Load the `ggplot` code to a variable called `g`, and then insert 
`girafe(ggobj = g)` as the last code in the output's code

```{r}

```

4. In `geom_col_interactive()` add the following arguments: 
    - `data_id` = `order_year` 
    - `tooltip` = `total_price`

```{r}

```

## 05 - Plot drill-down 
*Shows how to go a level deeper in to what has been clicked*

1. Add a `showModal()` that reacts when a column in the plot is clicked:
`observeEvent(input$sales_plot_selected, {showModal(modalDialog())})`
  
```{r}

```

2. Add an `options` argument to the `girafe()` function call: 
`options = list(opts_selection(type = "single"))`. Notice how only one column
is highlighted at a time.

```{r}

```

3. Add a `title` argument to the `modalDialog()` call. Use combination of the
`country` and `sales_plot_selected` values from `input` 

```{r}

```

4. Add a new `renderPLot()` function, and name it `output$montly_sales`. Inside,
add the full code from the **Plot data by month** section in the previous unit.
Make sure to replace `country` and `year`, with `input$country`, and 
`input$sales_plot_selected` respectively. Make sure to prefix `!!` when adding
them to the `filter()` call

```{r}

```

5. Finally, add `plotOutput("monthly_sales")` to the `modelDialog()` call

```{r}

```