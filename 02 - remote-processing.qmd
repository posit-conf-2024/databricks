---
title: "Remote processing"
---

```{r, setup}
#| include: false
library(dplyr)
library(dbplyr)
library(DBI)
```

## 01 - Create a table variable

*Basics to how to point a variable in R to a table or view inside the database*

1. Load the `dplyr`, `DBI` and `dbplyr` libraries
```{r, dplyr}
library(dplyr)
library(dbplyr)
library(DBI)
```

2. *(Optional)* Open a connection to the database if it's currently closed
```{r}
con <- dbConnect(
  odbc::databricks(),
  HTTPPath = "/sql/1.0/warehouses/300bd24ba12adf8e"
)
```

3. Using `dbGetQuery()` create a query to pull the `diamonds` table

```{r}

```

4. Use the `tbl()` to perform the same
```{r}

```

5. Load the reference, not the table data, into a variable
```{r}

```


6. Call the variable to see preview the data in the table
```{r}

```

7. Add `count()` to easily get the number of rows
```{r}

```

8. Add `cut` as an argument to `count()` to see the count by that field
```{r}

```

9. Add `show_query()` to see the how `dplyr` translates your code to 
SQL 

```{r}

```
## 02 -  Easily aggretate data
*An example of how we can use the same code against a local R data frame and a remote table*

1. Using `dplyr`, get the average price for each `cut`, and sort it by the
average for `diamonds`, from the `ggplot2` package

```{r}
ggplot2::diamonds |> 
  group_by(cut) |> 
  summarise(avg_price = mean(price, na.rm = TRUE)) |> 
  arrange(desc(avg_price))
```

2. Use `tbl_diamonds` to perform the exact same operation 

```{r}

```

3. Load code into a variable named `price_by_cut`

```{r}

```

4. Call `price_by_cut` 

```{r}

```

## 03 -  Data collection
*Understand the difference between printing and collecting*


1. Call the `tbl_diamonds` variable directly

```{r}

```

2. Call `tbl_diamonds` via `print()`.

```{r}

```

3. Call `tbl_diamonds` via `collect()`. Notice it prints the **entire** table 

```{r}

```

4. Load the previous operation to a variable named `local_diamonds`

```{r}

```

5. Use `pull()` to extract the values from `price` only

```{r}

```

6. Load the previous operation to a variable named `price`. Notice that this time,
the variable is a vector, not a data frame.

```{r}

```

## 04 - Referring to non-default catalog tables
*Using I() to create non-default table references*

1. Create a reference to the `customer` table, which is under the `tpch` schema, 
inside the `samples` catalog

```{r}
tbl(con, I("workshops.tpch.customer"))
```

2. Create a reference to the `sales_order_in_la` table, under the `ferit` schema

```{r}

```

