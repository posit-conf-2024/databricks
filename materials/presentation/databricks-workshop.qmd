---
format: 
  revealjs:
    width: 1600
    height: 920
    max-scale: 1
    min-scale: 1
    smaller: true
    transition: fade
    background-transition: fade
    theme: theme.scss
    code-line-numbers: false
    menu: true
    code-block-height: 640px
engine: knitr
---

# {background-image="assets/background/title-slide-white.png" background-size="1700px" background-color="white"}

::: {.content-slide-thin}
Welcome to
:::

::: {.content-slide}
**Using** **Databricks** <br/> **with** **R** 
:::

::: {.content-slide-thin}
Workshop 
<br/>
August 12
:::


## [Housekeeping items]{style="color:#666;"} {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

<br/>

:::{.columns}
::: {.column width="20%"}
:::

::: {.column width="80%"}
::: custom
-   **posit::conf** mobile app
-   Wi-fi password
-   Accessing your server
:::
:::
:::

##  {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

:::{.columns}
::: {.column width="50%"}
::: {.schedule1}
Schedule
:::
:::

::: {.column width="50%"}
::: {.schedule}
**9am - 10:30am**

Break (30mins)

**11am - 12:30pm**

Lunch (1hr)

**1:30pm - 3pm**

Break (30mins)

**3:30pm - 5pm**
:::
:::
:::

## [The team]{style="color:#666;"} {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

![](assets/diagrams/edgar.png){.absolute top="250" left="120" width="550"}
![](assets/diagrams/james.png){.absolute top="250" left="920" width="550"}

:::{.columns}
:::{.column}
:::{.team}
Edgar Ruiz 
:::
:::{.team-thin}
Instructor
:::
:::
:::{.column}
:::{.team}
James Blair
:::
:::{.team-thin}
TA
:::
:::
:::


## [Materials]{style="color:#666;"} {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

:::{.columns}
::: {.column width="20%"}
:::

::: {.column width="80%"}
::: custom
-   Posit Workbench Server
-   Databricks Cluster
-   Deck
-   Exercise book
:::
:::
:::

## [Posit + Databricks]{style="color:#666;"} {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

:::{.custom2}
Special work we have done as part of the new partnership
:::

![](assets/diagrams/posit-databricks.png){.absolute top="300" left="380"}

## {background-image="assets/background/content.png" background-size="1700px" background-color="#2a7070"}

:::{.content-slide-title}
Unit 1
:::

:::{.content-slide}
Accessing <br/> Databricks 
:::

## [Using RStudio]{style="color:#666;"} {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

:::{.custom2}
In the *"Connections"* pane, select *"New Connection"*
:::

![](assets/diagrams/connection-1.png){.absolute top="230" left="130" width="1200"}

## [Using RStudio]{style="color:#666;"} {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

:::{.custom2}
Select *'warehouse'*
:::

![](assets/diagrams/connection-2.png){.absolute top="230" left="450" width="700"}

## [Using RStudio]{style="color:#666;"} {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

:::{.custom2}
Click *'OK'*
:::

![](assets/diagrams/connection-3.png){.absolute top="230" left="450" width="700"}

## [RStudio DB Navigator]{style="color:#666;"} {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

:::{.custom2}
Explore the catalogs, schema and tables
:::

![](assets/diagrams/posit-databricks.png){.absolute top="-10" left="1430" width="180"}

![](assets/diagrams/connection-4.png){.absolute top="230" left="350" width="900"}

## {background-image="assets/background/green.png" background-size="1700px" background-color="#799857"}

:::{.green-slide}
Exercises 1.1 - 1.2
:::

## [How everything connects]{style="color:#666;"} {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

![](assets/diagrams/odbc.png){.absolute top="120" left="120"}

## [Connecting - Good]{style="color:#666;"} {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

:::{.sample-code}

`dbConnect()` & `odbc::odbc()` lets you easily connect to the SQL Warehouse

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "|1|2|3|4-5|6|7-12"

con <- dbConnect(
  odbc::odbc(),
  Driver = ".../lib/libsparkodbc_sb64-universal.dylib",
  Host = Sys.getenv("DATABRICKS_HOST"),
  PWD = Sys.getenv("DATABRICKS_TOKEN"),
  HTTPPath = "/sql/1.0/warehouses/300bd24ba12adf8e",
  Port = 443,
  AuthMech = 3,
  Protocol = "https",
  ThriftTransport = 2,
  SSL = 1,
  UID = "token"
)
```
:::

:::{.footer}
https://solutions.posit.co/connections/db/databases/databricks/#using-the-odbcodbc-function
:::

## [Connecting - Better]{style="color:#666;"} {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

![](assets/diagrams/posit-databricks.png){.absolute top="-10" left="1430" width="180"}

:::{.sample-code}

- `odbc::databricks()` super simplifies the setup
- Automatically detects credentials, driver, and sets default arguments
- `HTTPPath` is the only argument that you will need
:::

<br/>

:::{.columns}
::: {.column width="10%"}
:::

::: {.column width="80%"}
:::{.sample-code}
```{r}
#| eval: false
#| echo: true

con <- dbConnect(
  odbc::databricks(),
  HTTPPath = "/sql/1.0/warehouses/300bd24ba12adf8e"
)
```
:::
:::
:::

:::{.footer}
https://solutions.posit.co/connections/db/databases/databricks/#using-the-new-odbcdatabricks-function
:::

## {background-image="assets/background/green.png" background-size="1700px" background-color="#799857"}

:::{.green-slide}
Exercises 1.3 - 1.4
:::


## [Using DBI]{style="color:#666;"} {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}
<br/>

:::{.columns}
:::{.column width="10%"}

:::
:::{.column width="90%"}
:::{.custom2}
- `dbConnect()` - Connects to the database
- `dbDisconnect()` - Disconnects the database
- `dbListTables()` - Lists the tables 
- `dbListFields()` - Lists the fields of a table 
- `dbGetQuery()` - Runs the query & collects results
:::
:::
:::

## {background-image="assets/background/green.png" background-size="1700px" background-color="#799857"}

:::{.green-slide}
Exercise 1.5
:::

## [How everything connects (Revisited)]{style="color:#666;"}   {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

![](assets/diagrams/odbc.png){.absolute top="120" left="120"}

## [Other RStudio interfaces]{style="color:#666;"} {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

<br/>

:::{.columns}
:::{.column}
:::{.custom2}
`knitr` SQL engine 
:::
:::
:::{.column}
:::{.custom2}
RStudio SQL script
:::
:::
:::

![](assets/diagrams/sql-knitr.png){.absolute top="300" left="20" width="800"}
![](assets/diagrams/sql-script.png){.absolute top="300" left="850" width="600"}
![](assets/diagrams/sql-script-result.png){.absolute top="450" left="975" width="600"}

## {background-image="assets/background/green.png" background-size="1700px" background-color="#799857"}

:::{.green-slide}
Exercise 1.6 - 1.7
:::

## {background-image="assets/background/content.png" background-size="1700px" background-color="#2a7070"}

:::{.content-slide}
"Embrace <br/> the <br/> remoteness" 
:::
:::{.content-slide-thin}
[Martin Grund, *Databricks*]{style="font-size:70px;"}
:::

## {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

:::{.content-slide-title}
ðŸ”‘ Key concept 
:::

<br/><br/>

:::{.content-slide}
Data & processing need to be as **physically close** as possible
:::

## [Working with Databricks]{style="color:#666;"} {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

![](assets/diagrams/topology.png){.absolute top="100" left="170" width="1200"}

## ["Default" approach]{style="color:#666;"} {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

![](assets/diagrams/topology.png){.absolute top="100" left="170" width="1200"}
![](assets/diagrams/data.png){.absolute top="220" left="900" width="200"}
![](assets/diagrams/data.png){.absolute top="640" left="900" width="200"}

## ["Default" approach]{style="color:#666;"} {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

![](assets/diagrams/topology.png){.absolute top="100" left="170" width="1200"}
![](assets/diagrams/data.png){.absolute top="220" left="900" width="200"}
![](assets/diagrams/data.png){.absolute top="640" left="900" width="200"}
![](assets/diagrams/download-data.png){.absolute top="330" left="360" width="630"}

## ["Default" approach]{style="color:#666;"} {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

![](assets/diagrams/topology.png){.absolute top="100" left="170" width="1200"}
![](assets/diagrams/data.png){.absolute top="220" left="900" width="200"}
![](assets/diagrams/data.png){.absolute top="640" left="900" width="200"}
![](assets/diagrams/processing.png){.absolute top="380" left="-50" width="220"}
![](assets/diagrams/download-data.png){.absolute top="330" left="360" width="630"}

## [Better approach!]{style="color:#666;"} {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

![](assets/diagrams/topology.png){.absolute top="100" left="170" width="1200"}
![](assets/diagrams/data.png){.absolute top="220" left="900" width="200"}
![](assets/diagrams/data.png){.absolute top="640" left="900" width="200"}

## [Better approach!]{style="color:#666;"} {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

![](assets/diagrams/topology.png){.absolute top="100" left="170" width="1200"}
![](assets/diagrams/data.png){.absolute top="220" left="900" width="200"}
![](assets/diagrams/data.png){.absolute top="640" left="900" width="200"}
![](assets/diagrams/processing.png){.absolute top="290" left="865" width="220"}
![](assets/diagrams/processing.png){.absolute top="475" left="865" width="220"}

## [Better approach!]{style="color:#666;"} {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

![](assets/diagrams/topology.png){.absolute top="100" left="170" width="1200"}
![](assets/diagrams/data.png){.absolute top="220" left="900" width="200"}
![](assets/diagrams/data.png){.absolute top="640" left="900" width="200"}
![](assets/diagrams/download-results.png){.absolute top="330" left="360" width="630"}
![](assets/diagrams/processing.png){.absolute top="290" left="865" width="220"}
![](assets/diagrams/processing.png){.absolute top="475" left="865" width="220"}

## [Takeaways]{style="color:#666;"} {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

:::{.custom2}
- [Download data if doing something only R can do]{style="font-size:75px;"}
- [ðŸ”‘ Data & processing need to be as **physically close** as possible]{style="font-size:75px;"}
- [Move most of the processing to Databricks]{style="font-size:75px;"}
- [But how?...]{style="font-size:75px;"}
:::

## {background-image="assets/background/content.png" background-size="1700px" background-color="#2a7070"}

:::{.content-slide-title}
Unit 2
:::

:::{.content-slide}
Remote <br/> processing 
:::


## [Approaches]{style="color:#666;"} {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

:::{.columns}
:::{.column}
:::{.custom2}
Preferred
:::
:::
:::{.column}
:::{.custom2}
"Use in case of emergencies"
:::
:::
:::

![](assets/diagrams/push-collect.png){.absolute top="255" left="150" width="500"}
![](assets/diagrams/extract-data.png){.absolute top="350" left="950" width="500"}

## [SQL not practical]{style="color:#666;"} {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

:::{.columns}
:::{.column}
:::{.custom2}
- SQL language was not meant for exploratory data analysis
- "Cognitive cost" of switching between SQL and R 
- It is not as easy to plot, model, or present results in SQL as it is with R
:::
:::
:::{.column}
<br/>
<br/>
<br/>
[
select 'cut', avg('price') as 'avg_price' from 'diamonds'
group by 'cut' order by 'avg_price' desc
]{style="color:#666; font-family:Helvetica Neue; font-weight:200;font-size:60px;"}
:::
:::

## [Use dplyr & dbplyr]{style="color:#666;"} {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

![](assets/diagrams/dplyr.png){.absolute top="0" left="1300" width="150"}
![](assets/diagrams/dbplyr.png){.absolute top="0" left="1450" width="150"}

<br/>

:::{.columns}
:::{.column width="45%"}
:::{.custom2}
- Translates R code to SQL!
- 'Modularity' of piped code
- Guardrails against pulling all of the data 
- All your code is in R
:::
:::
:::{.column width="55%"}
<br/>
[
**tbl**(con, "diamonds") %>% 
<br/>[X]{style="color: #fff;"}**group_by**(cut) %>% 
<br/>[X]{style="color: #fff;"}**summarise**(
<br/>[XX]{style="color: #fff;"}avg_price = **mean**(price, na.rm = TRUE)
<br/>[XX]{style="color: #fff;"}) %>% 
<br/>[X]{style="color: #fff;"}**arrange**(**desc**(avg_price))
]{style="color:#666; font-family:Helvetica Neue; font-weight:200;font-size:45px;"}

:::
:::

## [ðŸ”‘ How does it work?]{style="color:#666;"} {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

![](assets/diagrams/dplyr.png){.absolute top="0" left="1300" width="150"}
![](assets/diagrams/dbplyr.png){.absolute top="0" left="1450" width="150"}

<br/>

:::{.columns}
:::{.column width="40%"}

:::{.custom2}
- Creates a "virtual" table 
- Behaves like a regular data frame
- It contains no data
- It's a pointer to the database table

:::

:::
:::{.column width="60%"}

[
tbl_diamonds <- **tbl**(con, "diamonds")<br/>
<br/>
tbl_diamonds %>% <br/>
[XX]{style="color: #fff;"}**count**()<br/>
]{style="color:#666; font-family:Helvetica Neue; font-weight:200;font-size:45px;"} 
[
<br/>
[Source:   SQL [1 x 1]]{style="color:#aaa;"}<br/>
[Database: Spark SQL 3.1.1[token@Spark SQL/hive_metastore]]{style="color:#aaa;"}<br/>
[XXX]{style="color: #fff;"}n<br/>
[\<int64\>]{style="color:#aaa;"} <br/>
1      53940<br/>
]{style="color:#333; font-family:Helvetica Neue; font-weight:300;font-size:35px;"} 

:::
:::

## [ðŸ”‘ How does it work?]{style="color:#666;"} {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

![](assets/diagrams/dplyr.png){.absolute top="0" left="1300" width="150"}
![](assets/diagrams/dbplyr.png){.absolute top="0" left="1450" width="150"}

<br/>

:::{.columns}
:::{.column width="55%"}

:::{.custom2}
- Create a variable in R without importing data
- SQL is sent **only** when data is requested
- Behind the scenes, translates code to SQL
:::

:::
:::{.column width="45%"}
<br/>
[
tbl_diamonds %>% <br/>
[XX]{style="color: #fff;"}**count**() %>%<br/>
[XX]{style="color: #fff;"}**show_query**()<br/>
]{style="color:#666; font-family:Helvetica Neue; font-weight:200;font-size:55px;"} 
[
<br/>
\<SQL\><br/>
SELECT COUNT(*) AS 'n'<br/>
FROM 'diamonds'<br/>
]{style="color:#999; font-family:Helvetica Neue; font-weight:300;font-size:45px;"} 

:::
:::

## {background-image="assets/background/green.png" background-size="1700px" background-color="#799857"}

:::{.green-slide}
Exercises 2.1 - 2.2
:::

## [PSA]{style="color:#666;"} {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

:::{.custom2}
Please, please, please...don't pass a full query to `tbl()`
:::

:::{.columns}
:::{.column width="2%"}
:::
:::{.column width="98%"}
[
**tbl**(con, "Select * from 'table' where x = 1")
]{style="font-size: 90px;font-family:Helvetica Neue; font-weight:150;"}
:::
:::

## [PSA]{style="color:#666;"} {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

:::{.custom2}
Please, please, please...don't pass a full query to `tbl()`
:::

:::{.columns}
:::{.column width="2%"}
:::
:::{.column width="98%"}
[
**tbl**(con, "Select * from 'table' where x = 1")
]{style="text-decoration: line-through; font-size: 90px;font-family:Helvetica Neue; font-weight:150;"}
:::
:::

:::{.columns}
:::{.column width="25%"}
:::
:::{.column width="75%"}
<br/>
[
tbl_table <- **tbl**(con, "table") <br/><br/>
x_1 <- tbl_table %>% <br/>
[XX]{style="color: #fff;"}**filter**(x == 1) 
]{style="color:#666; font-family:Helvetica Neue; font-weight:200;font-size:80px; line-height: 0.8"} 
:::
:::

## {background-image="assets/background/content.png" background-size="1700px" background-color="#2a7070"}

:::{.content-slide-title}
Unit 3
:::

:::{.content-slide}
More about <br/>
`dplyr` & <br/>
`dbplyr`
:::


## [Data collection]{style="color:#666;"} {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}
:::{.custom2}
There are 3 commands that download data:
:::

:::{.columns}

:::{.column width="55%"}

:::{.custom2}
- `print()` - Downloads the first 1K rows by default (Guardrails)
- `collect()` - Downloads **all** of the data
- `pull()` - Download **all** the data of a single field
:::
:::

:::{.column width="45%"}
[
tbl_cars <- **tbl**(con, "cars")<br/>
**print**(tbl_cars)<br/>
tbl_cars [#Print is implied]{style="color:#aaa"} <br/>
**collect**(tbl_cars) <br/>
**pull**(tbl_cars, mpg) 
]{style="color:#666; font-family:Helvetica Neue; font-weight:150;font-size:65px;line-height:1.8;"} 
:::
:::

## {background-image="assets/background/green.png" background-size="1700px" background-color="#799857"}

:::{.green-slide}
Exercise 3.1
:::

## [Databricks Unity Catalog (UC)]{style="color:#666;"} {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

:::{.custom2}
Centralizes access control, auditing, lineage, and data discovery across workspaces.
:::

![](assets/diagrams/object-model.png){.absolute top="280" left="300"}

::: footer
https://docs.databricks.com/en/data-governance/unity-catalog/index.html
:::

## [Accessing the UC]{style="color:#666;"} {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

:::{.custom2}
*"diamonds"* can be accessed without specifying catalog and schema
:::

<br/><br/><br/>
[
# Why do you work?! <br/>
]{style="color:#999; font-family:Helvetica Neue; font-weight:200;font-size:60px; line-height: 0.8"} 
[
**tbl**(con, "diamonds") 
]{style="color:#666; font-family:Helvetica Neue; font-weight:200;font-size:80px; line-height: 1.1"} 

![](assets/diagrams/uc-default1.png){.absolute top="280" left="800" width="850"}

## [Accessing the UC]{style="color:#666;"} {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

:::{.custom2}
*"hive_metastore"* & *"default"* are the default catalog & schema respectively 
:::

<br/><br/><br/>
[
# Oooh, that's why! <br/>
]{style="color:#999; font-family:Helvetica Neue; font-weight:200;font-size:60px; line-height: 0.8"} 
[
**tbl**(con, "diamonds") 
]{style="color:#666; font-family:Helvetica Neue; font-weight:200;font-size:80px; line-height: 1.1"} 

![](assets/diagrams/uc-default2.png){.absolute top="280" left="800" width="850"}

## [Non-default catalog]{style="color:#666;"} {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

:::{.custom2}
How do I access tables not in the default catalog?
:::

[
**tbl**(con, "customer") 
]{style="color:#666; font-family:Helvetica Neue; font-weight:200;font-size:70px;"} 
<br/>
[
x (31740) Table or view not found: ..customer
]{style="color:#bc544b; font-family:Helvetica Neue; font-weight:400;font-size:35px; line-height: 1.1"} 

![](assets/diagrams/uc-customer.png){.absolute top="210" left="820" width="820"}

## [Non-default catalog]{style="color:#666;"} {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

:::{.custom2}
How do I access tables not in the default catalog?
:::

[
**tbl**(con, "customer") 
]{style="color:#666; font-family:Helvetica Neue; font-weight:200;font-size:70px;"} 
<br/>
[
x (31740) Table or view not found: ..customer
]{style="color:#bc544b; font-family:Helvetica Neue; font-weight:400;font-size:35px; line-height: 1.1"} 
<br/><br/>
[
**tbl**(<br/>
[X]{style="color: #fff;"}con, <br/>
[X]{style="color: #fff;"}"samples.tpch.customer"<br/>
[X]{style="color: #fff;"})<br/>
]{style="color:#666; font-family:Helvetica Neue; font-weight:200;font-size:70px; line-height: 1.1"} 
[
x (31740) Table or view not found: ..samples.tpch.<br/>customer
]{style="color:#bc544b; font-family:Helvetica Neue; font-weight:400;font-size:35px; line-height: 1.1"} 

![](assets/diagrams/uc-customer.png){.absolute top="210" left="820" width="820"}


## [Non-default catalog]{style="color:#666;"} {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

:::{.custom2}
Use `I()` to create the correct table reference
:::
<br/>
<br/>
[
**tbl**(<br/>
[X]{style="color: #fff;"}con, <br/>
[X]{style="color: #fff;"}**I**("samples.tpch.customer")<br/>
[X]{style="color: #fff;"})<br/>
]{style="color:#666; font-family:Helvetica Neue; font-weight:200;font-size:70px; line-height: 1.1"} 

![](assets/diagrams/uc-customer.png){.absolute top="210" left="820" width="820"}

:::{.footer}
https://www.tidyverse.org/blog/2024/04/dbplyr-2-5-0/#referring-to-tables-in-a-schema
:::

## {background-image="assets/background/green.png" background-size="1700px" background-color="#799857"}

:::{.green-slide}
Exercise 3.2
:::

## [Variable selection]{style="color:#666;"} {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}
:::{.custom2}
Using `select()` with these functions make variable selection easy: 
:::

:::{.columns}
:::{.column width="10%"}
:::
:::{.column width="80%"}
:::{.custom2}
- `starts_with()` - Starts with an exact prefix
- `ends_with()` - Ends with an exact suffix
- `contains()` - Contains a literal string
- `everything()` - Selects everything else. Use with other selection functions.
:::
:::
:::

## {background-image="assets/background/green.png" background-size="1700px" background-color="#799857"}

:::{.green-slide}
Exercise 3.3
:::

## [Joining tables]{style="color:#666;"} {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

![](assets/diagrams/join-x.png){.absolute top="100" left="600"}
![](assets/diagrams/join-y.png){.absolute top="100" left="800"}

<br/><br/><br/><br/><br/><br/>

:::{.columns}
:::{.column width="10%"}
:::
:::{.column width="30%"}
`left_join()`
:::
:::{.column width="30%"}
`right_join()`
:::
:::{.column width="30%"}
`full_join()`
:::
:::

![](assets/diagrams/join-left.png){.absolute top="500" left="170"}
![](assets/diagrams/join-right.png){.absolute top="500" left="660"}
![](assets/diagrams/join-full.png){.absolute top="500" left="1150"}

## {background-image="assets/background/green.png" background-size="1700px" background-color="#799857"}

:::{.green-slide}
Exercise 3.4
:::

## {background-image="assets/background/content.png" background-size="1700px" background-color="#2a7070"}

:::{.content-slide-title}
Unit 4
:::

:::{.content-slide}
[Preparing <br/>
and exploring <br/>
data]{style="font-size:130px;"}
:::

## [Preparing data]{style="color:#666;"} {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

:::{.custom2}
Load prepared data to a variable, without downloading it
:::

:::{.sample-code}
```r
prep_orders <- orders %>% 
  left_join(customers, by = c("o_custkey" = "c_custkey")) %>% 
  left_join(nation, by = c("c_nationkey" = "n_nationkey")) %>% 
  mutate(
    order_year = year(o_orderdate), 
    order_month = month(o_orderdate)
  ) %>% 
  rename(customer = o_custkey) %>% 
  select(-ends_with("comment"),  -ends_with("key"))
```
:::

## [Exploring data]{style="color:#666;"} {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

:::{.custom2}
Use the base query for data exploration
:::

:::{.sample-code}
```r
prep_orders %>% 
  group_by(n_name) %>% 
  summarise(total_price = sum(o_totalprice, na.rm = TRUE)) %>% 
  arrange(desc(total_price)) %>% 
  head(5)
#>   n_name     total_price
#>   <chr>            <dbl>
#> 1 IRAQ      45968155784.
#> 2 INDONESIA 45921526909.
#> 3 GERMANY   45725194460.
#> 4 FRANCE    45713656960.
#> 5 IRAN      45708446851.
```
:::

## {background-image="assets/background/green.png" background-size="1700px" background-color="#799857"}

:::{.green-slide}
Exercises 4.1 - 4.2
:::


## {background-image="assets/background/content.png" background-size="1700px" background-color="#2a7070"}

:::{.content-slide-title}
Unit 5
:::

:::{.content-slide}
[Visualizations]{style="font-size:130px;"}
:::

## [Plotting local data]{style="color:#666;"} {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

![](assets/diagrams/plotting-local.png){.absolute top="110" left="50" width="1500"}

## [Plotting remote data]{style="color:#666;"} {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

![](assets/diagrams/plotting-remote.png){.absolute top="110" left="50" width="1500"}

## [What that looks like in R]{style="color:#666;"} {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

:::{.custom2}
Pipe the prepared data into a `ggplot2` 
:::
<br/>
```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "|1-6|7-8"
prep_orders %>% 
  group_by(order_year) %>% 
  summarise(
    total_price = sum(o_totalprice, na.rm = TRUE)
  ) %>% 
  arrange(order_year) %>% 
  ggplot() +
  geom_col(aes(order_year, total_price)) 
```

## [What that looks like in R]{style="color:#666;"} {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

:::{.custom2}
Pipe the prepared data into a `ggplot2` 
:::

:::{.columns}
:::{.column width="55%"}

:::{.sample-code}
```r
prep_orders %>% 
  group_by(order_year) %>% 
  summarise(
    total_price = sum(o_totalprice, na.rm = TRUE)
  ) %>% 
  arrange(order_year) %>% 
  ggplot() +
  geom_col(
    aes(order_year, total_price)
    ) 
```
:::

:::
:::{.column width="45%"}

![](assets/diagrams/plotting-example.png){.absolute top="200" left="900" width="700"}

:::
:::

## [What that looks like in R]{style="color:#666;"} {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

:::{.custom2}
Pipe the prepared data into a `ggplot2` 
:::
<br/>
```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "6"
prep_orders %>% 
  group_by(order_year) %>% 
  summarise(
    total_price = sum(o_totalprice, na.rm = TRUE)
  ) %>% 
  collect() %>% # Why are you missing?
  arrange(order_year) %>% 
  ggplot() +
  geom_col(aes(order_year, total_price)) 
```

## [ggplot2 "auto-collects"]{style="color:#666;"} {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

:::{.custom2}
*Be careful! It downloads all of the data!*
:::

<br/>

```r
nation <- tbl(con, I("samples.tpch.nation"))

nation %>% 
  ggplot() +
  geom_col(aes(n_name, n_regionkey))
```
## {background-image="assets/background/green.png" background-size="1700px" background-color="#799857"}

:::{.green-slide}
Exercise 5.1
:::

## [The truth about ggplot2]{style="color:#666;"} {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

:::{.custom2}
A plot gets refined iteratively, data must be local.
:::

:::{.columns}
:::{.column width="6%"}
:::
:::{.column width="90%"}
<br/>

:::{.incremental1}
- *'Improve scales'*
- *'Add labels to the data'*
- *'Add title and subtitle'*
- *'Improve colors'*
- *'Change the theme'*
:::
:::
:::

![](assets/diagrams/ggplot-dev.png){.absolute top="215" left="700" width="850"}

## [What that looks like in R]{style="color:#666;"} {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

:::{.custom2}
Collect (download) the data into an R variable
:::

<br/>

```r
sales_by_year <- prep_orders %>% 
  group_by(order_year) %>% 
  summarise(
    total_price = sum(o_totalprice, na.rm = TRUE)
  ) %>% 
  collect()
```

## [What that looks like in R]{style="color:#666;"} {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

:::{.custom2}
Iterate on the plot using the local data
:::

<br/>

```r
sales_by_year %>% 
  ggplot() +
  geom_col(aes(order_year, total_price)) 
```

## [What that looks like in R]{style="color:#666;"} {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

:::{.custom2}
Iterate on the plot using the local data
:::

:::{.sample-code}
```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "|1|3|6|7|8-10|11|"
breaks <- as.double(quantile(c(0, max(sales_by_year$total_price))))
breaks_labels <- paste(round(breaks / 1000000000, 1), "B")
sales_by_year %>% 
  ggplot() +
  geom_col(aes(order_year, total_price)) +
  scale_x_continuous(breaks = unique(sales_by_year$order_year)) +
  scale_y_continuous(breaks = breaks, labels = breaks_labels) +
  xlab("Year") +
  ylab("Total Sales") +
  labs(title = "Sales by year") +
  theme_light()
```
:::

## {background-image="assets/background/green.png" background-size="1700px" background-color="#799857"}

:::{.green-slide}
Exercises 5.2 - 5.4
:::


![](assets/background/racoon.jpg){.absolute top="220" left="900" width="430"}

## {background-image="assets/background/content.png" background-size="1700px" background-color="#2a7070"}

:::{.content-slide-title}
Unit 6
:::

:::{.content-slide}
Dashboards
:::

## [Dashboards]{style="color:#666;"} {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

:::{.columns}
:::{.column width="55%"}
:::{.custom2}
- [Data driven dropdowns]{style="font-size:80px;"}
:::
:::
:::

![](assets/diagrams/dashboard-dropdown.png){.absolute top="120" left="875" width="750"}

## [Dashboards]{style="color:#666;"} {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

:::{.columns}
:::{.column width="55%"}
:::{.custom2}
- [Data driven dropdowns]{style="font-size:80px;"}
- [Interactive plots (hover over)]{style="font-size:80px;"}
:::
:::
:::

![](assets/diagrams/dashboard-selection.png){.absolute top="120" left="875" width="750"}

## [Dashboards]{style="color:#666;"} {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

:::{.columns}
:::{.column width="55%"}
:::{.custom2}
- [Data driven dropdowns]{style="font-size:80px;"}
- [Interactive plots (hover over)]{style="font-size:80px;"}
- [Drill down when interacting with the plot]{style="font-size:80px;"}
:::
:::
:::

![](assets/diagrams/dashboard-drill-down.png){.absolute top="120" left="875" width="750"}


## {background-image="assets/background/thank-you.png" background-size="1700px" background-color="#2a7070"} {visibility="hidden"}