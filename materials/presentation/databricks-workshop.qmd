---
format: 
  revealjs:
    width: 1600
    height: 920
    max-scale: 1
    min-scale: 1
    smaller: true
    transition: fade
    background-transition: fade
    theme: theme.scss
    code-line-numbers: false
    menu: false
    code-block-height: 640px
engine: knitr
---

# {background-image="assets/background/title-slide-white.png" background-size="1700px" background-color="white"}

::: {.content-slide-thin}
Welcome to
:::

::: {.content-slide}
**Using** **Databricks** <br/> **with** **R** 
:::

::: {.content-slide-thin}
Workshop 
<br/>
August 12
:::


## Housekeeping items {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

<br/>

::: columns
::: {.column width="20%"}
:::

::: {.column width="80%"}
::: custom
-   **posit::conf** mobile app
-   Wi-fi password
-   Accessing your server
:::
:::
:::

##  {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

::: columns
::: {.column width="50%"}
::: {.schedule1}
Schedule
:::
:::

::: {.column width="50%"}
::: {.schedule}
**9am - 10:30am**

Break (30mins)

**11am - 12:30pm**

Lunch (1hr)

**1:30pm - 3pm**

Break (30mins)

**3:30pm - 5pm**
:::
:::
:::

## The team {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

![](assets/diagrams/edgar.png){.absolute top="250" left="120" width="550"}
![](assets/diagrams/james.png){.absolute top="250" left="920" width="550"}

:::{.columns}
:::{.column}
:::{.team}
Edgar Ruiz 
:::
:::{.team-thin}
Instructor
:::
:::
:::{.column}
:::{.team}
James Blair
:::
:::{.team-thin}
TA
:::
:::
:::


## Materials {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

::: columns
::: {.column width="20%"}
:::

::: {.column width="80%"}
::: custom
-   Posit Workbench Server
-   Databricks Cluster
-   Deck
-   Exercise book
:::
:::
:::

## Posit + Databricks {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

:::{.custom2}
Special work we have done as part of the new partnership
:::

![](assets/diagrams/posit-databricks.png){.absolute top="300" left="380"}

## {background-image="assets/background/content.png" background-size="1700px" background-color="#2a7070"}

:::{.content-slide-title}
Unit 1
:::

:::{.content-slide}
Accessing <br/> Databricks 
:::

## Using RStudio {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

:::{.custom2}
In the *"Connections"* pane, select *"New Connection"*
:::

![](assets/diagrams/connection-1.png){.absolute top="230" left="130" width="1200"}

## Using RStudio {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

:::{.custom2}
Select *'warehouse'*
:::

![](assets/diagrams/connection-2.png){.absolute top="230" left="450" width="700"}

## Using RStudio {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

:::{.custom2}
Click *'OK'*
:::

![](assets/diagrams/connection-3.png){.absolute top="230" left="450" width="700"}

## RStudio DB Navigator {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

:::{.custom2}
Explore the catalogs, schema and tables
:::

![](assets/diagrams/connection-4.png){.absolute top="230" left="350" width="900"}

## {background-image="assets/background/green.png" background-size="1700px" background-color="#799857"}

:::{.green-slide}
Exercises 1.1 - 1.2
:::

## How everything connects {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

![](assets/diagrams/odbc.png){.absolute top="120" left="120"}

## Connecting - Good{background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

:::{.sample-code}

`dbConnect()` & `odbc::odbc()` lets you easily connect to the SQL Warehouse

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "|1|2|3|4-5|6|7-12"

con <- dbConnect(
  odbc::odbc(),
  Driver = ".../lib/libsparkodbc_sb64-universal.dylib",
  Host = Sys.getenv("DATABRICKS_HOST"),
  PWD = Sys.getenv("DATABRICKS_TOKEN"),
  HTTPPath = "/sql/1.0/warehouses/300bd24ba12adf8e",
  Port = 443,
  AuthMech = 3,
  Protocol = "https",
  ThriftTransport = 2,
  SSL = 1,
  UID = "token"
)
```
:::

## Connecting - Better{background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

![](assets/diagrams/posit-databricks.png){.absolute top="-10" left="1430" width="180"}

:::{.sample-code}

`odbc::databricks()` super simplifies the setup. <br/>
Automatically detects credentials, driver, and sets default arguments <br/>
`HTTPPath` is the only argument that you will need.
:::

<br/>

::: columns
::: {.column width="10%"}
:::

::: {.column width="80%"}
:::{.sample-code}
```{r}
#| eval: false
#| echo: true

con <- dbConnect(
  odbc::databricks(),
  HTTPPath = "/sql/1.0/warehouses/300bd24ba12adf8e"
)
```
:::
:::
:::

## {background-image="assets/background/green.png" background-size="1700px" background-color="#799857"}

:::{.green-slide}
Exercises 1.3 - 1.4
:::


## Using DBI  {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

:::{.custom2}
:::{.incremental}
- `dbConnect()` - Connects to the database
- `dbDisconnect()` - Disconnects the database
- `dbListTables()` - Lists the tables 
- `dbListFields()` - Lists the fields of a table 
- `dbGetQuery()` - Runs the query & collects results
:::
:::

## {background-image="assets/background/green.png" background-size="1700px" background-color="#799857"}

:::{.green-slide}
Exercise 1.5
:::

## How everything connects (Revisited)  {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

![](assets/diagrams/odbc.png){.absolute top="120" left="120"}

## Other RStudio interfaces {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

<br/>

:::{.columns}
:::{.column}
:::{.custom2}
`knitr` SQL engine 
:::
:::
:::{.column}
:::{.custom2}
RStudio SQL script
:::
:::
:::

![](assets/diagrams/sql-knitr.png){.absolute top="300" left="20" width="800"}
![](assets/diagrams/sql-script.png){.absolute top="300" left="850" width="600"}
![](assets/diagrams/sql-script-result.png){.absolute top="450" left="975" width="600"}

## {background-image="assets/background/green.png" background-size="1700px" background-color="#799857"}

:::{.green-slide}
Exercise 1.6 - 1.7
:::

## {background-image="assets/background/content.png" background-size="1700px" background-color="#2a7070"}

:::{.content-slide}
"Embrace <br/> the <br/> remoteness" 
:::
:::{.content-slide-thin}
[Martin Grund, *Databricks*]{style="font-size:70px;"}
:::

## {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

:::{.content-slide-title}
ðŸ”‘ Key concept 
:::

<br/><br/>

:::{.content-slide}
Data and processing need to be as **close** as possible
:::

## Working with Databricks {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

![](assets/diagrams/topology.png){.absolute top="100" left="170" width="1200"}

## "Default" approach {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

![](assets/diagrams/topology.png){.absolute top="100" left="170" width="1200"}
![](assets/diagrams/data.png){.absolute top="220" left="900" width="200"}
![](assets/diagrams/data.png){.absolute top="640" left="900" width="200"}

## "Default" approach {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

![](assets/diagrams/topology.png){.absolute top="100" left="170" width="1200"}
![](assets/diagrams/data.png){.absolute top="220" left="900" width="200"}
![](assets/diagrams/data.png){.absolute top="640" left="900" width="200"}
![](assets/diagrams/download-data.png){.absolute top="330" left="360" width="630"}

## "Default" approach {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

![](assets/diagrams/topology.png){.absolute top="100" left="170" width="1200"}
![](assets/diagrams/data.png){.absolute top="220" left="900" width="200"}
![](assets/diagrams/data.png){.absolute top="640" left="900" width="200"}
![](assets/diagrams/processing.png){.absolute top="380" left="-50" width="220"}
![](assets/diagrams/download-data.png){.absolute top="330" left="360" width="630"}

## Better approach! {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

![](assets/diagrams/topology.png){.absolute top="100" left="170" width="1200"}
![](assets/diagrams/data.png){.absolute top="220" left="900" width="200"}
![](assets/diagrams/data.png){.absolute top="640" left="900" width="200"}

## Better approach! {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

![](assets/diagrams/topology.png){.absolute top="100" left="170" width="1200"}
![](assets/diagrams/data.png){.absolute top="220" left="900" width="200"}
![](assets/diagrams/data.png){.absolute top="640" left="900" width="200"}
![](assets/diagrams/processing.png){.absolute top="290" left="875" width="220"}
![](assets/diagrams/processing.png){.absolute top="710" left="875" width="220"}

## Better approach! {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

![](assets/diagrams/topology.png){.absolute top="100" left="170" width="1200"}
![](assets/diagrams/data.png){.absolute top="220" left="900" width="200"}
![](assets/diagrams/data.png){.absolute top="640" left="900" width="200"}
![](assets/diagrams/download-results.png){.absolute top="330" left="360" width="630"}
![](assets/diagrams/processing.png){.absolute top="290" left="875" width="220"}
![](assets/diagrams/processing.png){.absolute top="710" left="875" width="220"}

## Takeaways {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

:::{.incremental}
:::{.custom2}
- Downloading data is a valid approach, as long as we are doing something that only R can do
-  ðŸ”‘ Data and processing need to be as **close** as possible
- It is possible to move most, if not all, of the processing to the database and Spark
- But how?...
:::
:::

## {background-image="assets/background/content.png" background-size="1700px" background-color="#2a7070"}

:::{.content-slide-title}
Unit 2 & 3
:::

:::{.content-slide}
Using `dplyr`
:::

:::{.content-slide-thin}
/dee-plier/
:::

## Approaches {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

:::{.columns}
:::{.column}
:::{.custom2}
Preferred
:::
:::
:::{.column}
:::{.custom2}
"Use in case of emergencies"
:::
:::
:::

![](assets/diagrams/push-collect.png){.absolute top="255" left="150" width="500"}
![](assets/diagrams/extract-data.png){.absolute top="350" left="950" width="500"}

## SQL not practical {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

:::{.custom2}
- SQL language was not meant for exploratory data analysis
- "Cognitive cost" of switching between SQL and R 
:::

<br/>

:::{.columns}
:::{.column}
:::{.sample-code}
```sql
select `am`, avg(`mpg`) as 
`avg_mpg` from `cars`  group by 
`am` order by `avg_mpg` desc
```
:::
:::
:::{.column}
:::{.sample-code}
```bash
     am avg_mpg
  <dbl>   <dbl>
1     1    24.4
2     0    17.1
```
:::
:::
:::

## Options to "push compute" {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

<br/>

::: columns
::: {.column width="50%"}

:::{.custom2}
Write SQL statement
:::

<br/>

:::{.custom2-thin}

*SELECT*
  'o_orderpriority', 
  SUM('o_totalprice') AS 'total'
  <br/>
*FROM*
  'samples'.'tpch'.'orders'
  <br/>
*GROUP BY *
  'o_orderpriority'
:::

:::
::: {.column width="50%"}

:::{.custom2}
Use `dplyr` verbs
:::

<br/>

:::{.custom2-thin}
orders %>% <br/>
  *group_by*(o_orderpriority) %>% <br/>
  *summarise*(total = sum(o_totalprice, na.rm = TRUE))
:::

:::
:::

## Advantages {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}

::: columns
::: {.column width="65%"}

::: {.custom}
- `dplyr` translates to SQL
- Modularity of piped code
- All your code is in R!
:::

:::
::: {.column width="30%"}

![](assets/diagrams/dplyr-push.png){.absolute width="550"}
:::
:::

## {background-image="assets/background/green.png" background-size="1700px" background-color="#799857"}

:::{.green-slide}
Exercises 2.1 - 2.6
:::

## {background-image="assets/background/thank-you.png" background-size="1700px" background-color="#2a7070"}

![](assets/background/racoon.jpg){.absolute top="220" left="900" width="430"}

## Simple {background-image="assets/background/slide.png" background-size="1700px" background-color="white"}


## Frame Dark {background-image="assets/background/slide-frame-dark.png" background-size="1700px" background-color="#2a7070"}

## Frame Bright {background-image="assets/background/slide-frame.png" background-size="1700px" background-color="white"}


