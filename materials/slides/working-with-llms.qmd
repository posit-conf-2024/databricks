---
format: 
  revealjs:
    width: 1600
    height: 920
    max-scale: 1
    min-scale: 1
    smaller: true
    transition: fade
    background-transition: fade
    theme: theme.scss
    code-line-numbers: false
    menu: true
    code-block-height: 640px
    slide-number: true
engine: knitr
---

```{r}
#| include: false
if(!("no_working_with_llms" %in% ls())) no_working_with_llms <- 1
```

# {background-image="assets/background/content-slide.svg" background-size="1700px" background-color="#2a7070"}

:::{.content-slide-title}
Unit `r no_working_with_llms`
:::

:::{.content-slide}
Working with <br/> 
LLMs in <br/> 
Databricks
:::

## {background-image="assets/background/boxed-white.svg" background-size="1700px" background-color="#2a7070"}

<br/><br/><br/><br/><br/>

:::{.columns}
:::{.column width="5%"}
:::
:::{.column width="95%"}
:::{.content-slide}
[Enhance SQL operations using LLM's]{style="font-size:130px; line-height: 0.5;"}
:::
:::
:::


## [Databricks LLMs via SQL]{style="color:#666;"} {background-image="assets/background/slide-light.svg" background-size="1700px" background-color="white"}

:::{.columns}
:::{.column width="46%"}
:::{.custom2}
:::{.incremental1}
- Databricks allows us to access LLM functionality right from SQL 
- Accessible via calling the `ai_` family of functions
- Adds new way of leveraging LLMs, batch scoring
:::
:::
:::
:::{.column width="54%"}

<br/><br/>

:::{.code-slim-45}
```sql
> SELECT ai_analyze_sentiment('I am happy');
  positive
```
:::

<br/>

:::{.code-slim-45}
```sql
> SELECT ai_analyze_sentiment('I am sad');
  negative
```
:::
:::
:::

:::{.footer}
https://docs.databricks.com/en/large-language-models/ai-functions-example.html
:::

## [Call *ai* functions in dplyr]{style="color:#666;"} {background-image="assets/background/slide-light.svg" background-size="1700px" background-color="white"}

![](assets/remote-processing/dplyr.png){.absolute top="0" left="1410" width="90"}
![](assets/remote-processing/dbplyr.png){.absolute top="0" left="1500" width="90"}

:::{.columns}
:::{.column width="40%"}
:::{.custom2}
:::{.incremental1}
- Easily access the `ai` functions by calling them via `dplyr` verbs
- `dbplyr` passes unrecognized functions 'as-is' in the query
:::
:::
:::
:::{.column width="60%"}
:::{.code-slim-35}
```r
orders |>
  head() |> 
  select(o_comment) |> 
  mutate(sentiment = ai_analyze_sentiment(o_comment)) 
  
#> # Source:   SQL [6 x 2]
#> # Database: Spark SQL 3.1.1[token@Spark SQL/hive_metastore]
#>   o_comment                         sentiment
#>   <chr>                                  <chr>    
#> 1 ", pending theodolites …     neutral  
#> 2 "uriously special foxes …     neutral  
#> 3 "sleep. courts after the …    neutral  
#> 4 "ess foxes may sleep …      neutral  
#> 5 "ts wake blithely unusual …  mixed    
#> 6 "hins sleep. fluffily …            neutral
```
:::
:::
:::

## [Available LLM functions]{style="color:#666;"} {background-image="assets/background/slide-light.svg" background-size="1700px" background-color="white"}

:::{.columns}
:::{.column width="7%"}
:::
:::{.column width="90%"}
:::{.incremental1}
:::{.sample-code}
- `ai_analyze_sentiment` - [Text is positve, negative, neutral, etc.]{style="font-size: 45px;"}
- `ai_classify` - [Give choices, LLM chooses which of the choice match]{style="font-size: 45px;"}
- `ai_extract` - [Have LLM extract specific elements from the text]{style="font-size: 45px;"}
- `ai_fix_grammar` - [Makes grammar more better]{style="font-size: 45px;"}
- `ai_mask` - [Replaces specified elements with '[Masked]']{style="font-size: 45px;"}
- `ai_similarity` - [Compares 2 texts, returns integer indicating similarity]{style="font-size: 45px;"}
- `ai_summarize` - [Summarizes text, you can also specify length of output]{style="font-size: 45px;"}
- `ai_translate` - [Tell LLM to translate to specific language]{style="font-size: 45px;"}
- `ai_forecast` - [Time series prediction, not text]{style="font-size: 45px;"}
:::
:::
:::
:::

## [Considerations in Databricks]{style="color:#666;"} {background-image="assets/background/slide-light.svg" background-size="1700px" background-color="white"}

:::{.columns}
:::{.column width="5%"}
:::
:::{.column width="90%"}
:::{.incremental1}
:::{.custom2}
- Need APIs pay-per-token supported region
- Functions not available on Databricks SQL Classic
- In preview, functions have performance restrictions
- Functions are tuned for English, but model can handle several languages
- **Mixtral-8x7B Instruct** is the underlying model that powers most of these AI functions

:::
:::
:::
:::


## {background-image="assets/background/boxed-green.svg" background-size="1700px" background-color="#799857"}

:::{.green-slide}
Exercise `r no_working_with_llms`.1
:::

## [Specify array]{style="color:#666;"} {background-image="assets/background/slide-light.svg" background-size="1700px" background-color="white"}

:::{.columns}
:::{.column width="35%"}
:::{.custom2}
:::{.incremental1}
- Most `ai` functions require an argument of `ARRAY` type
- SQL's `array()` function can be called directly inside the `ai` function
:::
:::
:::
:::{.column width="65%"}

[SQL]{style="font-size: 50px;"}

:::{.code-slim-35}
```sql
> SELECT
     description,
     ai_classify(description, array('clothing', 'furniture')) AS category
   FROM
     products
```
:::

[R]{style="font-size: 50px;"}

:::{.code-slim-35}
```r
tbl_products |> 
  mutate(
    category = ai_classify(description, array("clothing", "furniture"))
  ) |> 
  select(description, category)
```
:::
:::
:::

## {background-image="assets/background/boxed-green.svg" background-size="1700px" background-color="#799857"}

:::{.green-slide}
Exercise `r no_working_with_llms`.2
:::

## [Process complex output]{style="color:#666;"} {background-image="assets/background/slide-light.svg" background-size="1700px" background-color="white"}

:::{.columns}
:::{.column width="30%"}
:::{.incremental1}
- Some `ai` functions return a `STRUCT`
- It is a more complex variable type
- It can only be coerced to a string
- `as.character()` does the trick
:::
:::
:::{.column width="70%"}

:::{.code-slim-45}
```r
tbl_reviews |> 
  mutate(
    product = as.character(ai_extract(review, array("product")))
    ) |> 
  select(product, review)
#> # Source:   SQL [4 x 2]
#>   product           review                                                      
#>   <chr>             <chr>                                                       
#> 1 {toaster}         This is the best toaster I have ever bought                 
#> 2 {Toaster}         Toaster arrived broken, waiting for replancement            
#> 3 {washing machine} The washing machine is as advertised, cant wait to use it   
#> 4 {television}      Not sure how to feel about this tevelision, nice brightness…
```
:::
:::
:::

## {background-image="assets/background/boxed-green.svg" background-size="1700px" background-color="#799857"}

:::{.green-slide}
Exercise `r no_working_with_llms`.3
:::

## {background-image="assets/background/boxed-white.svg" background-size="1700px" background-color="#2a7070"}

<br/><br/><br/><br/><br/><br/>

:::{.columns}
:::{.column width="5%"}
:::
:::{.column width="95%"}
:::{.content-slide}
[Chat with LLM's from R]{style="font-size:130px; line-height: 0.5;"}
:::
:::
:::

## [Introducing chattr]{style="color:#666;"} {background-image="assets/background/slide-light.svg" background-size="1700px" background-color="white"}

![](assets/llms/chattr.png){.absolute top="0" left="1450" width="150"}

:::{.columns}
:::{.column width="45%"}

<br/>

:::{.incremental1}
- `chattr` is an interface to LLMs (Large Language Models)
- It enables interaction with the model directly from  RStudio
- Submit a prompt to the LLM from your script, or by using the provided Shiny Gadget.
:::
:::
:::{.column width="55%"}

<br/><br/><br/>

:::{.code-slim-45}
```r
library(chattr)

chattr("my programming question")

chattr_app()
```
:::
:::
:::

## [chattr supports Databricks' LLM]{style="color:#666;"} {background-image="assets/background/slide-light.svg" background-size="1700px" background-color="white"}

![](assets/posit-databricks.png){.absolute top="-10" left="1430" width="180"}

![](assets/llms/chattr-db.png){.absolute top="300" left="450" width="700"}


## [chattr supports Databricks' LLM]{style="color:#666;"} {background-image="assets/background/slide-light.svg" background-size="1700px" background-color="white"}

![](assets/posit-databricks.png){.absolute top="-10" left="1430" width="180"}

[`chattr` can connect Databricks LLM models. Automatically makes the options available if it detects your Databricks token.]{style="font-size:50px;line-height:1;font-weight:400;color:#666;"}

:::{.code-slim-35}
```r
> chattr_app()
── chattr - Available models 
Select the number of the model you would like to use:

1: Databricks - databricks-dbrx-instruct (databricks-dbrx) 

2: Databricks - databricks-meta-llama-3-70b-instruct (databricks-meta-llama3-70b) 

3: Databricks - databricks-mixtral-8x7b-instruct (databricks-mixtral8x7b) 

Selection: 1
```
:::
