---
title: "dplyr basics"
execute: 
  eval: true
  freeze: true
---


```{r, setup}
#| include: false
library(dplyr)
library(dbplyr)
library(DBI)
```

## Create a table variable

*Basics to how to point a variable in R to a table or view inside the database*

1. Load the `dplyr`, `DBI` and `dbplyr` libraries
```{r, dplyr}
library(dplyr)
library(dbplyr)
library(DBI)
```

2. *(Optional)* Open a connection to the database if it's currently closed
```{r}
con <- dbConnect(
  odbc::databricks(),
  HTTPPath = "/sql/1.0/warehouses/300bd24ba12adf8e"
)
```

3. Using `dbGetQuery()` create a query to pull the `cars` table

```{r}
dbGetQuery(con, "select * from cars")
```

4. Use the `tbl()` to perform the same. Notice how it automatically only shows 
the top 10
```{r}
tbl(con, "cars")
```

4. Load the reference, not the table data, into a variable
```{r}
tbl_cars <- tbl(con, "cars")
```


5. Call the variable to see preview the data in the table
```{r}
tbl_cars
```

6. Add `count()` to easily get the number of rows
```{r}
tbl_cars %>% 
  count()
```

7. Add `am` as an argument to `count()` to see the count by that field
```{r}
tbl_cars %>% 
  count(am)
```

8. Add `show_query()` to see the how `dplyr` translates your code to 
SQL 

```{r}
tbl_cars %>% 
  count(am) %>% 
  show_query()
```
## Easily aggretate data
*An example of how we can use the same code against a local R data frame and a remote table*

1. Using `dplyr`, get the average `mpg` for each `am`, and sort it by the
average for `mtcars`

```{r}
mtcars %>% 
  group_by(cyl) %>% 
  summarise(avg_mpg = mean(mpg, na.rm = TRUE)) %>% 
  arrange(desc(avg_mpg))
```

2. Use `tbl_cars` to perform the exact same operation 

```{r}
tbl_cars %>% 
  group_by(cyl) %>% 
  summarise(avg_mpg = mean(mpg, na.rm = TRUE)) %>% 
  arrange(desc(avg_mpg))
```

3. Load code into a variable named `mpg_by_cyl`

```{r}
mpg_by_cyl <- tbl_cars %>% 
  group_by(cyl) %>% 
  summarise(avg_mpg = mean(mpg, na.rm = TRUE)) %>% 
  arrange(desc(avg_mpg)) 
```

4. Call `mpg_by_cyl` 

```{r}
mpg_by_cyl
```


## Data collection
*Understand the difference between printing and collecting*


1. Call the `tbl_cars` variable directly

```{r}
tbl_cars
```

2. Call `tbl_cars` via `print()`. Notice is the same exact behavior, only top 
10 rows

```{r}
print(tbl_cars)
```

3. Call `tbl_cars` via `collect()`. Notice it prints the **entire** table 

```{r}
collect(tbl_cars)
```

4. Load the previous operation to a variable named `local_cars`

```{r}
local_cars <- collect(tbl_cars)
```

5. Use `pull()` to extract the values from `mpg` only

```{r}
tbl_cars %>% 
  pull(mpg)
```

6. Load the previous operation to a variable named `mpg`. Notice that this time,
the variable is a vector, not a data frame.

```{r}
mpg <- tbl_cars %>% 
  pull(mpg)
```

