---
title: "Intro to R UDFs"
execute: 
  eval: false
  freeze: false
  warning: false
---

```{r, setup}
#| include: false

library(dplyr)
library(dbplyr)
library(sparklyr)
library(tidymodels)
library(tidyverse)
```

## Catch up {.unnumbered}

```{r}
library(sparklyr)
library(dplyr)
sc <- spark_connect(method = "databricks_connect")
```

## Simple operations
*Trying out very simple operation to become familiar with the process*

1. Use `copy_to()` to send `mtcars` to the cluster. Load it to a variable called
`tbl_mtcars`

```{r}
tbl_mtcars <- copy_to(sc, mtcars)
```

2. Pipe `tbl_mtcars` to `spark_apply()`. Use `nrow` as the function to run

```{r}
tbl_mtcars |> 
  spark_apply(nrow)
```

3. Switch the function to use in `spark_apply()` to `dim`. Notice how it
returns more rows, because coercing the size 2 vector creates a 2 row data frame

```{r}
tbl_mtcars |> 
  spark_apply(dim)
```

## Group by variable
*Write and run simple grouping commands*


1. Go back to using `nrow` again for `spark_apply()`. Remember to 
pass `columns = "x long"`

```{r}
tbl_mtcars |> 
  spark_apply(nrow, columns = "x long")
```

2. Add the `group_by` argument, with the value of `"am"`. There should be an 
error. This is because there are 2 variables in the result, instead of one, and
we defined `x` only in `columns`

```{r}
#| eval: false
tbl_mtcars |> 
  spark_apply(nrow, group_by = "am", columns = "x long")
```

3. Insert `am long,` at the beginning of `columns`

```{r}
tbl_mtcars |> 
  spark_apply(nrow, group_by = "am", columns = "am long, x long")
```
4. To see how the name we pass does not have to match the variable name, change
`am` to `notam` in `columns`

```{r}
tbl_mtcars |> 
  spark_apply(nrow, group_by = "am", columns = "notam long, x long")
```

5. Change the grouping variable to "cyl", make sure to update that in the `columns`
argument as well

```{r}
tbl_mtcars |> 
  spark_apply(nrow, group_by = "cyl", columns = "cyl long, x long")
```


## Custom functions
*Create simple custom functions to send to Spark*

```{r}
tbl_mtcars |> 
  spark_apply(function(x) x[x$hp > 250, 1:4])
```

```{r}
tbl_mtcars |> 
  spark_apply(function(x) {
    x$new <- x$carb + x$gear
    x[, c(1,2,12)]
  })
```

