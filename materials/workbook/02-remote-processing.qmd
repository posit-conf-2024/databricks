---
title: "Remote processing"
execute: 
  eval: true
  freeze: true
---


```{r, setup}
#| include: false
library(dplyr)
library(dbplyr)
library(DBI)
```

## Create a table variable

*Basics to how to point a variable in R to a table or view inside the database*

1. Load the `dplyr`, `DBI` and `dbplyr` libraries
```{r, dplyr}
library(dplyr)
library(dbplyr)
library(DBI)
```

2. *(Optional)* Open a connection to the database if it's currently closed
```{r}
con <- dbConnect(
  odbc::databricks(),
  HTTPPath = "/sql/1.0/warehouses/300bd24ba12adf8e"
)
```

3. Using `dbGetQuery()` create a query to pull the `diamonds` table

```{r}
#| eval: false
dbGetQuery(con, "select * from diamonds")
```

4. Use the `tbl()` to perform the same
```{r}
tbl(con, "diamonds")
```

4. Load the reference, not the table data, into a variable
```{r}
tbl_diamonds <- tbl(con, "diamonds")
```


5. Call the variable to see preview the data in the table
```{r}
tbl_diamonds
```

6. Add `count()` to easily get the number of rows
```{r}
tbl_diamonds %>% 
  count()
```

7. Add `cut` as an argument to `count()` to see the count by that field
```{r}
tbl_diamonds %>% 
  count(cut)
```

8. Add `show_query()` to see the how `dplyr` translates your code to 
SQL 

```{r}
tbl_diamonds %>% 
  count(cut) %>% 
  show_query()
```
## Easily aggretate data
*An example of how we can use the same code against a local R data frame and a remote table*

1. Using `dplyr`, get the average price for each `cut`, and sort it by the
average for `diamonds`, from the `ggplot2` package

```{r}
ggplot2::diamonds %>% 
  group_by(cut) %>% 
  summarise(avg_price = mean(price, na.rm = TRUE)) %>% 
  arrange(desc(avg_price))
```

2. Use `tbl_diamonds` to perform the exact same operation 

```{r}
tbl_diamonds %>% 
  group_by(cut) %>% 
  summarise(avg_price = mean(price, na.rm = TRUE)) %>% 
  arrange(desc(avg_price))
```

3. Load code into a variable named `price_by_cut`

```{r}
price_by_cut <- tbl_diamonds %>% 
  group_by(cut) %>% 
  summarise(avg_price = mean(price, na.rm = TRUE)) %>% 
  arrange(desc(avg_price))
```

4. Call `price_by_cut` 

```{r}
price_by_cut
```
