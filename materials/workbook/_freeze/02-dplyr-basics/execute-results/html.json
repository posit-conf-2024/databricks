{
  "hash": "fe7161e3cc627dd4d416643a2d751945",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Remote processing\"\nexecute: \n  eval: true\n  freeze: true\n---\n\n\n\n\n## Create a table variable\n\n*Basics to how to point a variable in R to a table or view inside the database*\n\n1. Load the `dplyr`, `DBI` and `dbplyr` libraries\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(dbplyr)\nlibrary(DBI)\n```\n:::\n\n\n2. *(Optional)* Open a connection to the database if it's currently closed\n\n::: {.cell}\n\n```{.r .cell-code}\ncon <- dbConnect(\n  odbc::databricks(),\n  HTTPPath = \"/sql/1.0/warehouses/300bd24ba12adf8e\"\n)\n```\n:::\n\n\n3. Using `dbGetQuery()` create a query to pull the `cars` table\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbGetQuery(con, \"select * from cars\")\n#>              row_names  mpg cyl  disp  hp drat    wt  qsec vs am gear carb\n#> 1            Mazda RX4 21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\n#> 2        Mazda RX4 Wag 21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\n#> 3           Datsun 710 22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\n#> 4       Hornet 4 Drive 21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\n#> 5    Hornet Sportabout 18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\n#> 6              Valiant 18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\n#> 7           Duster 360 14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\n#> 8            Merc 240D 24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\n#> 9             Merc 230 22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\n#> 10            Merc 280 19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\n#> 11           Merc 280C 17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\n#> 12          Merc 450SE 16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\n#> 13          Merc 450SL 17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\n#> 14         Merc 450SLC 15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\n#> 15  Cadillac Fleetwood 10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\n#> 16 Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\n#> 17   Chrysler Imperial 14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\n#> 18            Fiat 128 32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\n#> 19         Honda Civic 30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\n#> 20      Toyota Corolla 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\n#> 21       Toyota Corona 21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\n#> 22    Dodge Challenger 15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\n#> 23         AMC Javelin 15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\n#> 24          Camaro Z28 13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\n#> 25    Pontiac Firebird 19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\n#> 26           Fiat X1-9 27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\n#> 27       Porsche 914-2 26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\n#> 28        Lotus Europa 30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\n#> 29      Ford Pantera L 15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\n#> 30        Ferrari Dino 19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\n#> 31       Maserati Bora 15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\n#> 32          Volvo 142E 21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\n```\n:::\n\n\n4. Use the `tbl()` to perform the same. Notice how it automatically only shows \nthe top 10\n\n::: {.cell}\n\n```{.r .cell-code}\ntbl(con, \"cars\")\n#> # Source:   table<`cars`> [?? x 12]\n#> # Database: Spark SQL 3.1.1[token@Spark SQL/hive_metastore]\n#>    row_names     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb\n#>    <chr>       <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n#>  1 Mazda RX4    21       6  160    110  3.9   2.62  16.5     0     1     4     4\n#>  2 Mazda RX4 …  21       6  160    110  3.9   2.88  17.0     0     1     4     4\n#>  3 Datsun 710   22.8     4  108     93  3.85  2.32  18.6     1     1     4     1\n#>  4 Hornet 4 D…  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1\n#>  5 Hornet Spo…  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2\n#>  6 Valiant      18.1     6  225    105  2.76  3.46  20.2     1     0     3     1\n#>  7 Duster 360   14.3     8  360    245  3.21  3.57  15.8     0     0     3     4\n#>  8 Merc 240D    24.4     4  147.    62  3.69  3.19  20       1     0     4     2\n#>  9 Merc 230     22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2\n#> 10 Merc 280     19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4\n#> # ℹ more rows\n```\n:::\n\n\n4. Load the reference, not the table data, into a variable\n\n::: {.cell}\n\n```{.r .cell-code}\ntbl_cars <- tbl(con, \"cars\")\n```\n:::\n\n\n\n5. Call the variable to see preview the data in the table\n\n::: {.cell}\n\n```{.r .cell-code}\ntbl_cars\n#> # Source:   table<`cars`> [?? x 12]\n#> # Database: Spark SQL 3.1.1[token@Spark SQL/hive_metastore]\n#>    row_names     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb\n#>    <chr>       <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n#>  1 Mazda RX4    21       6  160    110  3.9   2.62  16.5     0     1     4     4\n#>  2 Mazda RX4 …  21       6  160    110  3.9   2.88  17.0     0     1     4     4\n#>  3 Datsun 710   22.8     4  108     93  3.85  2.32  18.6     1     1     4     1\n#>  4 Hornet 4 D…  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1\n#>  5 Hornet Spo…  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2\n#>  6 Valiant      18.1     6  225    105  2.76  3.46  20.2     1     0     3     1\n#>  7 Duster 360   14.3     8  360    245  3.21  3.57  15.8     0     0     3     4\n#>  8 Merc 240D    24.4     4  147.    62  3.69  3.19  20       1     0     4     2\n#>  9 Merc 230     22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2\n#> 10 Merc 280     19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4\n#> # ℹ more rows\n```\n:::\n\n\n6. Add `count()` to easily get the number of rows\n\n::: {.cell}\n\n```{.r .cell-code}\ntbl_cars %>% \n  count()\n#> # Source:   SQL [1 x 1]\n#> # Database: Spark SQL 3.1.1[token@Spark SQL/hive_metastore]\n#>         n\n#>   <int64>\n#> 1      32\n```\n:::\n\n\n7. Add `am` as an argument to `count()` to see the count by that field\n\n::: {.cell}\n\n```{.r .cell-code}\ntbl_cars %>% \n  count(am)\n#> # Source:   SQL [2 x 2]\n#> # Database: Spark SQL 3.1.1[token@Spark SQL/hive_metastore]\n#>      am       n\n#>   <dbl> <int64>\n#> 1     1      13\n#> 2     0      19\n```\n:::\n\n\n8. Add `show_query()` to see the how `dplyr` translates your code to \nSQL \n\n\n::: {.cell}\n\n```{.r .cell-code}\ntbl_cars %>% \n  count(am) %>% \n  show_query()\n#> <SQL>\n#> SELECT `am`, COUNT(*) AS `n`\n#> FROM `cars`\n#> GROUP BY `am`\n```\n:::\n\n## Easily aggretate data\n*An example of how we can use the same code against a local R data frame and a remote table*\n\n1. Using `dplyr`, get the average `mpg` for each `am`, and sort it by the\naverage for `mtcars`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars %>% \n  group_by(cyl) %>% \n  summarise(avg_mpg = mean(mpg, na.rm = TRUE)) %>% \n  arrange(desc(avg_mpg))\n#> # A tibble: 3 × 2\n#>     cyl avg_mpg\n#>   <dbl>   <dbl>\n#> 1     4    26.7\n#> 2     6    19.7\n#> 3     8    15.1\n```\n:::\n\n\n2. Use `tbl_cars` to perform the exact same operation \n\n\n::: {.cell}\n\n```{.r .cell-code}\ntbl_cars %>% \n  group_by(cyl) %>% \n  summarise(avg_mpg = mean(mpg, na.rm = TRUE)) %>% \n  arrange(desc(avg_mpg))\n#> # Source:     SQL [3 x 2]\n#> # Database:   Spark SQL 3.1.1[token@Spark SQL/hive_metastore]\n#> # Ordered by: desc(avg_mpg)\n#>     cyl avg_mpg\n#>   <dbl>   <dbl>\n#> 1     4    26.7\n#> 2     6    19.7\n#> 3     8    15.1\n```\n:::\n\n\n3. Load code into a variable named `mpg_by_cyl`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpg_by_cyl <- tbl_cars %>% \n  group_by(cyl) %>% \n  summarise(avg_mpg = mean(mpg, na.rm = TRUE)) %>% \n  arrange(desc(avg_mpg)) \n```\n:::\n\n\n4. Call `mpg_by_cyl` \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpg_by_cyl\n#> # Source:     SQL [3 x 2]\n#> # Database:   Spark SQL 3.1.1[token@Spark SQL/hive_metastore]\n#> # Ordered by: desc(avg_mpg)\n#>     cyl avg_mpg\n#>   <dbl>   <dbl>\n#> 1     4    26.7\n#> 2     6    19.7\n#> 3     8    15.1\n```\n:::\n\n\n\n## Data collection\n*Understand the difference between printing and collecting*\n\n\n1. Call the `tbl_cars` variable directly\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntbl_cars\n#> # Source:   table<`cars`> [?? x 12]\n#> # Database: Spark SQL 3.1.1[token@Spark SQL/hive_metastore]\n#>    row_names     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb\n#>    <chr>       <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n#>  1 Mazda RX4    21       6  160    110  3.9   2.62  16.5     0     1     4     4\n#>  2 Mazda RX4 …  21       6  160    110  3.9   2.88  17.0     0     1     4     4\n#>  3 Datsun 710   22.8     4  108     93  3.85  2.32  18.6     1     1     4     1\n#>  4 Hornet 4 D…  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1\n#>  5 Hornet Spo…  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2\n#>  6 Valiant      18.1     6  225    105  2.76  3.46  20.2     1     0     3     1\n#>  7 Duster 360   14.3     8  360    245  3.21  3.57  15.8     0     0     3     4\n#>  8 Merc 240D    24.4     4  147.    62  3.69  3.19  20       1     0     4     2\n#>  9 Merc 230     22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2\n#> 10 Merc 280     19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4\n#> # ℹ more rows\n```\n:::\n\n\n2. Call `tbl_cars` via `print()`. Notice is the same exact behavior, only top \n10 rows\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(tbl_cars)\n#> # Source:   table<`cars`> [?? x 12]\n#> # Database: Spark SQL 3.1.1[token@Spark SQL/hive_metastore]\n#>    row_names     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb\n#>    <chr>       <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n#>  1 Mazda RX4    21       6  160    110  3.9   2.62  16.5     0     1     4     4\n#>  2 Mazda RX4 …  21       6  160    110  3.9   2.88  17.0     0     1     4     4\n#>  3 Datsun 710   22.8     4  108     93  3.85  2.32  18.6     1     1     4     1\n#>  4 Hornet 4 D…  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1\n#>  5 Hornet Spo…  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2\n#>  6 Valiant      18.1     6  225    105  2.76  3.46  20.2     1     0     3     1\n#>  7 Duster 360   14.3     8  360    245  3.21  3.57  15.8     0     0     3     4\n#>  8 Merc 240D    24.4     4  147.    62  3.69  3.19  20       1     0     4     2\n#>  9 Merc 230     22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2\n#> 10 Merc 280     19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4\n#> # ℹ more rows\n```\n:::\n\n\n3. Call `tbl_cars` via `collect()`. Notice it prints the **entire** table \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncollect(tbl_cars)\n#> # A tibble: 32 × 12\n#>    row_names     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb\n#>    <chr>       <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n#>  1 Mazda RX4    21       6  160    110  3.9   2.62  16.5     0     1     4     4\n#>  2 Mazda RX4 …  21       6  160    110  3.9   2.88  17.0     0     1     4     4\n#>  3 Datsun 710   22.8     4  108     93  3.85  2.32  18.6     1     1     4     1\n#>  4 Hornet 4 D…  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1\n#>  5 Hornet Spo…  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2\n#>  6 Valiant      18.1     6  225    105  2.76  3.46  20.2     1     0     3     1\n#>  7 Duster 360   14.3     8  360    245  3.21  3.57  15.8     0     0     3     4\n#>  8 Merc 240D    24.4     4  147.    62  3.69  3.19  20       1     0     4     2\n#>  9 Merc 230     22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2\n#> 10 Merc 280     19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4\n#> # ℹ 22 more rows\n```\n:::\n\n\n4. Load the previous operation to a variable named `local_cars`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlocal_cars <- collect(tbl_cars)\n```\n:::\n\n\n5. Use `pull()` to extract the values from `mpg` only\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntbl_cars %>% \n  pull(mpg)\n#>  [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4\n#> [16] 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4 15.8 19.7\n#> [31] 15.0 21.4\n```\n:::\n\n\n6. Load the previous operation to a variable named `mpg`. Notice that this time,\nthe variable is a vector, not a data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpg <- tbl_cars %>% \n  pull(mpg)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}