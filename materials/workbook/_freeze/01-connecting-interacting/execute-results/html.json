{
  "hash": "1697eb9be6dfe90374b881f5a2db4280",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Connecting and interacting\"\nexecute: \n  eval: true\n  freeze: true\n---\n\n\n## Connect to a database\n\n1. Click on the `Connections` tab\n\n1. Click on the `New Connection` button\n\n1. Select `warehouse`\n\n1. Click OK\n\n## Explore the database using the RStudio IDE\n\n1. Expand the `hive_metastore` catalog\n\n1. Expand the `defaults` schema\n\n1. Expand the `cars` table\n\n1. Click on the table icon to the right of the `cars` table \n\n1. *(Optional)* Expand and explore the other tables\n\n1. Click on the *disconnect* icon to close the connection\n\n## Connecting using `odbc::odbc()`\n*https://solutions.posit.co/connections/db/databases/databricks/#using-the-odbcodbc-function*\n\n1. Use the following code to start a new connection\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(DBI)\n\ncon <- dbConnect(\n  odbc::odbc(),\n  Driver = \"/Library/simba/spark/lib/libsparkodbc_sb64-universal.dylib\",\n  Host = Sys.getenv(\"DATABRICKS_HOST\"),\n  Port = 443,\n  AuthMech = 3,\n  HTTPPath = \"/sql/1.0/warehouses/300bd24ba12adf8e\",\n  Protocol = \"https\",\n  ThriftTransport = 2,\n  SSL = 1,\n  UID = \"token\",\n  PWD = Sys.getenv(\"DATABRICKS_TOKEN\")\n)\n```\n:::\n\n\n2. Disconnect from the database using `dbDisconnect()`\n\n::: {.cell}\n\n```{.r .cell-code}\ndbDisconnect(con)\n```\n:::\n\n\n## Connecting using `odbc::databricks()`\n*https://solutions.posit.co/connections/db/databases/databricks/#using-the-new-odbcdatabricks-function*\n\n1. Use the newer `odbc::databricks()` as the driver, which automatically sets the\ndefaults for you. Also, it will automatically look for the Databricks Host\nand Token, so you won't to specify it in the code.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncon <- dbConnect(\n  odbc::databricks(),\n  HTTPPath = \"/sql/1.0/warehouses/300bd24ba12adf8e\"\n)\n```\n:::\n\n\n## Interact with database\n\n1. Use `dbListTables()` to retrieve a list of tables\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbListTables(con)[1:4]\n#> [1] \"allergies\"   \"cars\"        \"conditions\"  \"covid_stats\"\n```\n:::\n\n\n2. Use `dbListFields()` to get the names of the fields of a given table\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbListFields(con, \"cars\")\n#>  [1] \"row_names\" \"mpg\"       \"cyl\"       \"disp\"      \"hp\"        \"drat\"     \n#>  [7] \"wt\"        \"qsec\"      \"vs\"        \"am\"        \"gear\"      \"carb\"\n```\n:::\n\n\n3. Use `dbGetQuery()` to run a quick query\n\n::: {.cell}\n\n```{.r .cell-code}\ndbGetQuery(con, \"SELECT * FROM cars LIMIT 5\")\n#>           row_names  mpg cyl disp  hp drat    wt  qsec vs am gear carb\n#> 1         Mazda RX4 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\n#> 2     Mazda RX4 Wag 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\n#> 3        Datsun 710 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\n#> 4    Hornet 4 Drive 21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\n#> 5 Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\n```\n:::\n\n\n## Using `knitr` chunks \n\n1. Use the SQL chunk\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT * FROM cars LIMIT 5\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 5 records\n\n|row_names         |  mpg| cyl| disp|  hp| drat|    wt|  qsec| vs| am| gear| carb|\n|:-----------------|----:|---:|----:|---:|----:|-----:|-----:|--:|--:|----:|----:|\n|Mazda RX4         | 21.0|   6|  160| 110| 3.90| 2.620| 16.46|  0|  1|    4|    4|\n|Mazda RX4 Wag     | 21.0|   6|  160| 110| 3.90| 2.875| 17.02|  0|  1|    4|    4|\n|Datsun 710        | 22.8|   4|  108|  93| 3.85| 2.320| 18.61|  1|  1|    4|    1|\n|Hornet 4 Drive    | 21.4|   6|  258| 110| 3.08| 3.215| 19.44|  1|  0|    3|    1|\n|Hornet Sportabout | 18.7|   8|  360| 175| 3.15| 3.440| 17.02|  0|  0|    3|    2|\n\n</div>\n:::\n\n\n2. Use the `output.var` option to load results to a variable\n\n::: {.cell output.var='sql_top5'}\n\n```{.sql .cell-code}\nSELECT * FROM cars LIMIT 5\n```\n:::\n\n\n3. Test the variable\n\n::: {.cell}\n\n```{.r .cell-code}\nsql_top5\n#>           row_names  mpg cyl disp  hp drat    wt  qsec vs am gear carb\n#> 1         Mazda RX4 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\n#> 2     Mazda RX4 Wag 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\n#> 3        Datsun 710 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\n#> 4    Hornet 4 Drive 21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\n#> 5 Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\n```\n:::\n\n\n4. Disconnect from the database using `dbDisconnect()`\n\n::: {.cell}\n\n```{.r .cell-code}\ndbDisconnect(con)\n```\n:::\n\n\n## RStudio SQL Script\n\n*Try out the new SQL Script support in RStudio*\n\n1. Open the *query-example.sql* file\n\n1. Click the *Preview* button. It is located in the top-right area of the script\n\n1. In the script, change *customer* to *orders*\n\n1. Click on *Preview* again\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}