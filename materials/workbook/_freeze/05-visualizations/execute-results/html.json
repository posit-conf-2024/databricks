{
  "hash": "e8ec9d310529dc23226d65f3d81da96d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Visualizations\"\nexecute: \n  eval: true\n  freeze: true\n---\n\n\n\n\n## Catch up {.unnumbered}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(dbplyr)\nlibrary(DBI)\n\ncon <- dbConnect(\n  odbc::databricks(),\n  HTTPPath = \"/sql/1.0/warehouses/300bd24ba12adf8e\"\n)\n\norders <- tbl(con, I(\"samples.tpch.orders\"))\ncustomers <- tbl(con, I(\"samples.tpch.customer\"))\nnation <- tbl(con, I(\"samples.tpch.nation\"))\n\nprep_orders <- orders %>% \n  left_join(customers, by = c(\"o_custkey\" = \"c_custkey\")) %>% \n  left_join(nation, by = c(\"c_nationkey\" = \"n_nationkey\")) %>% \n  mutate(\n    order_year = year(o_orderdate), \n    order_month = month(o_orderdate)\n  ) %>% \n  rename(customer = o_custkey) %>% \n  select(-ends_with(\"comment\"),  -ends_with(\"key\"))\n```\n:::\n\n\n## Auto-collect\n**See how `ggplot2` auto-collects data before plotting**\n\n1. Load `ggplot2`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n```\n:::\n\n\n2. Plot the `n_name` over `n_region_key` from the `nation` table. Use the\ncolumn geom.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnation %>% \n  ggplot() +\n  geom_col(aes(n_name, n_regionkey))\n#> Don't know how to automatically pick scale for object of type <integer64>.\n#> Defaulting to continuous.\n```\n\n::: {.cell-output-display}\n![](05-visualizations_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n## Plot data\n\n1. Using `prep_order`, pull the total sales by year (`o_totalprice`)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprep_orders %>% \n  group_by(order_year) %>% \n  summarise(\n    total_price = sum(o_totalprice, na.rm = TRUE)\n  ) %>% \n  arrange(order_year)\n#> # Source:     SQL [7 x 2]\n#> # Database:   Spark SQL 3.1.1[token@Spark SQL/hive_metastore]\n#> # Ordered by: order_year\n#>   order_year   total_price\n#>        <int>         <dbl>\n#> 1       1992 172177707476.\n#> 2       1993 172229906370.\n#> 3       1994 172079589600.\n#> 4       1995 171632673720.\n#> 5       1996 172605588831.\n#> 6       1997 171861381582.\n#> 7       1998 100852367668.\n```\n:::\n\n\n2. Add to the code, a step to plot the data. Use a column geom\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprep_orders %>% \n  group_by(order_year) %>% \n  summarise(\n    total_price = sum(o_totalprice, na.rm = TRUE)\n  ) %>% \n  arrange(order_year) %>% \n  ggplot() +\n  geom_col(aes(order_year, total_price)) \n```\n\n::: {.cell-output-display}\n![](05-visualizations_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n3. Download the results to R to a variable called `sales_by_year`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsales_by_year <- prep_orders %>% \n  group_by(order_year) %>% \n  summarise(\n    total_price = sum(o_totalprice, na.rm = TRUE)\n  ) %>% \n  collect()\n```\n:::\n\n\n4. Preview `sales_by_year`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsales_by_year\n#> # A tibble: 7 Ã— 2\n#>   order_year   total_price\n#>        <int>         <dbl>\n#> 1       1994 172079589600.\n#> 2       1997 171861381582.\n#> 3       1995 171632673720.\n#> 4       1992 172177707476.\n#> 5       1993 172229906370.\n#> 6       1996 172605588831.\n#> 7       1998 100852367668.\n```\n:::\n\n\n5. Use `sales_by_year` to create the same plot\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsales_by_year %>% \n  ggplot() +\n  geom_col(aes(order_year, total_price)) \n```\n\n::: {.cell-output-display}\n![](05-visualizations_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n6. An example of what multiple iterations of the plot would result in\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbreaks <- as.double(quantile(c(0, max(sales_by_year$total_price))))\n\nbreaks_labels <- paste(round(breaks / 1000000000, 1), \"B\")\n\nsales_by_year %>% \n  ggplot() +\n  geom_col(aes(order_year, total_price)) +\n  scale_x_continuous(breaks = unique(sales_by_year$order_year)) +\n  scale_y_continuous(breaks = breaks, labels = breaks_labels) +\n  xlab(\"Year\") +\n  ylab(\"Total Sales\") +\n  labs(title = \"Sales by year\") +\n  theme_light()\n```\n\n::: {.cell-output-display}\n![](05-visualizations_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n## Plot data by country\n\n1. Create a variable called `country`, with the value \"FRANCE\"\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncountry <- \"FRANCE\"\n```\n:::\n\n\n\n2. Modify `sales_by_year`, by adding a `filter` step to have the `n_name` match\nthe value of `country`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsales_by_year <- prep_orders %>% \n  filter(n_name == country) %>% \n  group_by(order_year) %>% \n  summarise(\n    total_price = sum(o_totalprice, na.rm = TRUE)\n  ) %>% \n  collect()\n```\n:::\n\n\n3. Copy and use the same code from the finalized plot. Add a subtitle with the\nvalue of `country`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbreaks <- as.double(quantile(c(0, max(sales_by_year$total_price))))\n\nbreaks_labels <- paste(round(breaks / 1000000000, 1), \"B\")\n\nsales_by_year %>% \n  ggplot() +\n  geom_col(aes(order_year, total_price)) +\n  scale_x_continuous(breaks = unique(sales_by_year$order_year)) +\n  scale_y_continuous(breaks = breaks, labels = breaks_labels) +\n  xlab(\"Year\") +\n  ylab(\"Total Sales\") +\n  labs(title = \"Sales by year\", subtitle = country) +\n  theme_light()\n```\n\n::: {.cell-output-display}\n![](05-visualizations_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "05-visualizations_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}