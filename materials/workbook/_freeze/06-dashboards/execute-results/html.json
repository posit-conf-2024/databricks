{
  "hash": "81399a8156a727369cc058d8874b15ae",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Dashboards\"\nexecute: \n  eval: true\n  freeze: true\n---\n\n\n\n\n## Preview app\n\n*Try out the finalized Shiny app*\n\n1. Open the *unit-06-app.R* file\n\n## Catch up {.unnumbered}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(dbplyr)\nlibrary(DBI)\n\ncon <- dbConnect(\n  odbc::databricks(),\n  HTTPPath = \"/sql/1.0/warehouses/300bd24ba12adf8e\"\n)\n\norders <- tbl(con, I(\"samples.tpch.orders\"))\ncustomers <- tbl(con, I(\"samples.tpch.customer\"))\nnation <- tbl(con, I(\"samples.tpch.nation\"))\n\nprep_orders <- orders |> \n  left_join(customers, by = c(\"o_custkey\" = \"c_custkey\")) |> \n  left_join(nation, by = c(\"c_nationkey\" = \"n_nationkey\")) |> \n  mutate(\n    order_year = year(o_orderdate), \n    order_month = month(o_orderdate)\n  ) |> \n  rename(customer = o_custkey) |> \n  select(-ends_with(\"comment\"),  -ends_with(\"key\"))\n```\n:::\n\n\n## Data driven dropdown\n\n1. Load the `shiny` library\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\n```\n:::\n\n\n2. Run the following code to see the \"stub\" Shiny app\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshinyApp(\n  ui = fluidPage(\n    selectInput(\"country\", \"Country:\", choices = \"FRANCE\", selected = \"FRANCE\"),\n    plotOutput(\"sales_plot\")\n  ),\n  server = function(input, output) {\n    output$sales_plot <- renderPlot({\n      # Your code here\n    })\n  },\n  options = list(height = 200)\n)\n```\n:::\n\n\n3. Retrieve the country names from `nation` into a character vector. Save the\nvalues to a variable called `countries`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncountries <- nation |> \n  pull(n_name)\n```\n:::\n\n\n4. Preview `countries`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncountries\n#>  [1] \"ALGERIA\"        \"ARGENTINA\"      \"BRAZIL\"         \"CANADA\"        \n#>  [5] \"EGYPT\"          \"ETHIOPIA\"       \"FRANCE\"         \"GERMANY\"       \n#>  [9] \"INDIA\"          \"INDONESIA\"      \"IRAN\"           \"IRAQ\"          \n#> [13] \"JAPAN\"          \"JORDAN\"         \"KENYA\"          \"MOROCCO\"       \n#> [17] \"MOZAMBIQUE\"     \"PERU\"           \"CHINA\"          \"ROMANIA\"       \n#> [21] \"SAUDI ARABIA\"   \"VIETNAM\"        \"RUSSIA\"         \"UNITED KINGDOM\"\n#> [25] \"UNITED STATES\"\n```\n:::\n\n\n5. Replace the values of `choices` in the Shiny app. Now use `countries` as its\nsource. Preview the app, the drop-down should now have the 25 countries as\noptions\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshinyApp(\n  ui = fluidPage(\n    selectInput(\"country\", \"Country:\", choices = countries, selected = \"FRANCE\"),\n    plotOutput(\"sales_plot\")\n  ),\n  server = function(input, output) {\n    output$sales_plot <- renderPlot({\n      # Your code here\n    })\n  },\n  options = list(height = 200)\n)\n```\n:::\n\n\n## Adding the plot\n*Port the code that creates the plot from the database*\n\n1. Load the `ggplot2` library\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n```\n:::\n\n\n2. Insert the full code that makes the country sales plot, the one in previous\nsection. It should include the code that creates the local data, and the one\nthat creates the plot itself. Place them in the area that says *# Your code here*.\nMake sure to replace, `country`, with `input$country`. Preview the app.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshinyApp(\n  ui = fluidPage(\n    selectInput(\"country\", \"Country:\", choices = countries, selected = \"FRANCE\"),\n    plotOutput(\"sales_plot\")\n  ),\n  server = function(input, output) {\n    output$sales_plot <- renderPlot({\n      sales_by_year <- prep_orders |>\n        filter(n_name == input$country) |>\n        group_by(order_year) |>\n        summarise(\n          total_price = sum(o_totalprice, na.rm = TRUE)\n        ) |>\n        collect()\n\n      breaks <- as.double(quantile(c(0, max(sales_by_year$total_price))))\n      breaks_labels <- paste(round(breaks / 1000000000, 1), \"B\")\n\n      sales_by_year |>\n        ggplot() +\n        geom_col(aes(order_year, total_price)) +\n        scale_x_continuous(breaks = unique(sales_by_year$order_year)) +\n        scale_y_continuous(breaks = breaks, labels = breaks_labels) +\n        xlab(\"Year\") +\n        ylab(\"Total Sales\") +\n        labs(title = \"Sales by year\", subtitle = input$country) +\n        theme_light()\n    })\n  },\n  options = list(height = 200)\n)\n```\n:::\n\n\n3. Prefix `!!` to the `input$country` entry where we create the `sales_by_year`\nvariable. Preview the app.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshinyApp(\n  ui = fluidPage(\n    selectInput(\"country\", \"Country:\", choices = countries, selected = \"FRANCE\"),\n    plotOutput(\"sales_plot\")\n  ),\n  server = function(input, output) {\n    output$sales_plot <- renderPlot({\n      sales_by_year <- prep_orders |>\n        filter(n_name == !!input$country) |>\n        group_by(order_year) |>\n        summarise(\n          total_price = sum(o_totalprice, na.rm = TRUE)\n        ) |>\n        collect()\n\n      breaks <- as.double(quantile(c(0, max(sales_by_year$total_price))))\n      breaks_labels <- paste(round(breaks / 1000000000, 1), \"B\")\n\n      sales_by_year |>\n        ggplot() +\n        geom_col(aes(order_year, total_price)) +\n        scale_x_continuous(breaks = unique(sales_by_year$order_year)) +\n        scale_y_continuous(breaks = breaks, labels = breaks_labels) +\n        xlab(\"Year\") +\n        ylab(\"Total Sales\") +\n        labs(title = \"Sales by year\", subtitle = input$country) +\n        theme_light()\n    })\n  },\n  options = list(height = 200)\n)\n```\n:::\n\n\n## Interactive plots\n*Using `ggiraph` to add plot interactivity*\n\n1. Load the `ggiraph` library\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggiraph)\n```\n:::\n\n\n2. In the Shiny app's code, replace:\n- `plotOUtput()` with `girafeOutput()`\n- `renderPlot()` with `renderGirafe()`\n- `geom_col()` with `geom_col_interactive()` \n\n\n::: {.cell}\n\n```{.r .cell-code}\nshinyApp(\n  ui = fluidPage(\n    selectInput(\"country\", \"Country:\", choices = countries, selected = \"FRANCE\"),\n    girafeOutput(\"sales_plot\")\n  ),\n  server = function(input, output) {\n    output$sales_plot <- renderGirafe({\n      sales_by_year <- prep_orders |>\n        filter(n_name == !!input$country) |>\n        group_by(order_year) |>\n        summarise(\n          total_price = sum(o_totalprice, na.rm = TRUE)\n        ) |>\n        collect()\n\n      breaks <- as.double(quantile(c(0, max(sales_by_year$total_price))))\n      breaks_labels <- paste(round(breaks / 1000000000, 1), \"B\")\n\n      sales_by_year |>\n        ggplot() +\n        geom_col_interactive(aes(order_year, total_price)) +\n        scale_x_continuous(breaks = unique(sales_by_year$order_year)) +\n        scale_y_continuous(breaks = breaks, labels = breaks_labels) +\n        xlab(\"Year\") +\n        ylab(\"Total Sales\") +\n        labs(title = \"Sales by year\", subtitle = input$country) +\n        theme_light()\n    })\n  },\n  options = list(height = 200)\n)\n```\n:::\n\n\n3. Load the `ggplot` code to a variable called `g`, and then insert \n`girafe(ggobj = g)` as the last code in the output's code\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshinyApp(\n  ui = fluidPage(\n    selectInput(\"country\", \"Country:\", choices = countries, selected = \"FRANCE\"),\n    girafeOutput(\"sales_plot\")\n  ),\n  server = function(input, output) {\n    output$sales_plot <- renderGirafe({\n      sales_by_year <- prep_orders |>\n        filter(n_name == !!input$country) |>\n        group_by(order_year) |>\n        summarise(\n          total_price = sum(o_totalprice, na.rm = TRUE)\n        ) |>\n        collect()\n\n      breaks <- as.double(quantile(c(0, max(sales_by_year$total_price))))\n      breaks_labels <- paste(round(breaks / 1000000000, 1), \"B\")\n\n      g <- sales_by_year |>\n        ggplot() +\n        geom_col_interactive(aes(order_year, total_price)) +\n        scale_x_continuous(breaks = unique(sales_by_year$order_year)) +\n        scale_y_continuous(breaks = breaks, labels = breaks_labels) +\n        xlab(\"Year\") +\n        ylab(\"Total Sales\") +\n        labs(title = \"Sales by year\", subtitle = input$country) +\n        theme_light()\n\n      girafe(ggobj = g)\n    })\n  },\n  options = list(height = 200)\n)\n```\n:::\n\n\n4. In `geom_col_interactive()` add the following arguments: \n    - `data_id` = `order_year` \n    - `tooltip` = `total_price`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshinyApp(\n  ui = fluidPage(\n    selectInput(\"country\", \"Country:\", choices = countries, selected = \"FRANCE\"),\n    girafeOutput(\"sales_plot\")\n  ),\n  server = function(input, output) {\n    output$sales_plot <- renderGirafe({\n      sales_by_year <- prep_orders |>\n        filter(n_name == !!input$country) |>\n        group_by(order_year) |>\n        summarise(\n          total_price = sum(o_totalprice, na.rm = TRUE)\n        ) |>\n        collect()\n\n      breaks <- as.double(quantile(c(0, max(sales_by_year$total_price))))\n      breaks_labels <- paste(round(breaks / 1000000000, 1), \"B\")\n\n      g <- sales_by_year |>\n        ggplot() +\n        geom_col_interactive(aes(order_year, total_price, data_id = order_year, tooltip = total_price)) +\n        scale_x_continuous(breaks = unique(sales_by_year$order_year)) +\n        scale_y_continuous(breaks = breaks, labels = breaks_labels) +\n        xlab(\"Year\") +\n        ylab(\"Total Sales\") +\n        labs(title = \"Sales by year\", subtitle = input$country) +\n        theme_light()\n\n      girafe(ggobj = g)\n    })\n  },\n  options = list(height = 200)\n)\n```\n:::\n\n\n## Plot drill-down \n*Shows how to go a level deeper in to what has been clicked*\n\n1. Add a `showModal()` that reacts when a column in the plot is clicked:\n`observeEvent(input$sales_plot_selected, {showModal(modalDialog())})`\n  \n\n::: {.cell}\n\n```{.r .cell-code}\nshinyApp(\n  ui = fluidPage(\n    selectInput(\"country\", \"Country:\", choices = countries, selected = \"FRANCE\"),\n    girafeOutput(\"sales_plot\")\n  ),\n  server = function(input, output) {\n    output$sales_plot <- renderGirafe({\n      sales_by_year <- prep_orders |>\n        filter(n_name == !!input$country) |>\n        group_by(order_year) |>\n        summarise(\n          total_price = sum(o_totalprice, na.rm = TRUE)\n        ) |>\n        collect()\n\n      breaks <- as.double(quantile(c(0, max(sales_by_year$total_price))))\n      breaks_labels <- paste(round(breaks / 1000000000, 1), \"B\")\n\n      g <- sales_by_year |>\n        ggplot() +\n        geom_col_interactive(aes(order_year, total_price, data_id = order_year, tooltip = total_price)) +\n        scale_x_continuous(breaks = unique(sales_by_year$order_year)) +\n        scale_y_continuous(breaks = breaks, labels = breaks_labels) +\n        xlab(\"Year\") +\n        ylab(\"Total Sales\") +\n        labs(title = \"Sales by year\", subtitle = input$country) +\n        theme_light()\n\n      girafe(ggobj = g)\n    })\n    \n    observeEvent(input$sales_plot_selected, {\n      showModal(modalDialog())\n      })\n  },\n  options = list(height = 200)\n)\n```\n:::\n\n\n2. Add an `options` argument to the `girafe()` function call: \n`options = list(opts_selection(type = \"single\"))`. Notice how only one column\nis highlighted at a time.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshinyApp(\n  ui = fluidPage(\n    selectInput(\"country\", \"Country:\", choices = countries, selected = \"FRANCE\"),\n    girafeOutput(\"sales_plot\")\n  ),\n  server = function(input, output) {\n    output$sales_plot <- renderGirafe({\n      sales_by_year <- prep_orders |>\n        filter(n_name == !!input$country) |>\n        group_by(order_year) |>\n        summarise(\n          total_price = sum(o_totalprice, na.rm = TRUE)\n        ) |>\n        collect()\n\n      breaks <- as.double(quantile(c(0, max(sales_by_year$total_price))))\n      breaks_labels <- paste(round(breaks / 1000000000, 1), \"B\")\n\n      g <- sales_by_year |>\n        ggplot() +\n        geom_col_interactive(aes(order_year, total_price, data_id = order_year, tooltip = total_price)) +\n        scale_x_continuous(breaks = unique(sales_by_year$order_year)) +\n        scale_y_continuous(breaks = breaks, labels = breaks_labels) +\n        xlab(\"Year\") +\n        ylab(\"Total Sales\") +\n        labs(title = \"Sales by year\", subtitle = input$country) +\n        theme_light()\n\n      girafe(ggobj = g, options = list(opts_selection(type = \"single\")))\n    })\n    \n    observeEvent(input$sales_plot_selected, {\n      showModal(modalDialog())\n      })\n  },\n  options = list(height = 200)\n)\n```\n:::\n\n\n3. Add a `title` argument to the `modalDialog()` call. Use combination of the\n`country` and `sales_plot_selected` values from `input` \n\n\n::: {.cell}\n\n```{.r .cell-code}\nshinyApp(\n  ui = fluidPage(\n    selectInput(\"country\", \"Country:\", choices = countries, selected = \"FRANCE\"),\n    girafeOutput(\"sales_plot\")\n  ),\n  server = function(input, output) {\n    output$sales_plot <- renderGirafe({\n      sales_by_year <- prep_orders |>\n        filter(n_name == !!input$country) |>\n        group_by(order_year) |>\n        summarise(\n          total_price = sum(o_totalprice, na.rm = TRUE)\n        ) |>\n        collect()\n\n      breaks <- as.double(quantile(c(0, max(sales_by_year$total_price))))\n      breaks_labels <- paste(round(breaks / 1000000000, 1), \"B\")\n\n      g <- sales_by_year |>\n        ggplot() +\n        geom_col_interactive(aes(order_year, total_price, data_id = order_year, tooltip = total_price)) +\n        scale_x_continuous(breaks = unique(sales_by_year$order_year)) +\n        scale_y_continuous(breaks = breaks, labels = breaks_labels) +\n        xlab(\"Year\") +\n        ylab(\"Total Sales\") +\n        labs(title = \"Sales by year\", subtitle = input$country) +\n        theme_light()\n\n      girafe(ggobj = g, options = list(opts_selection(type = \"single\")))\n    })\n\n    observeEvent(input$sales_plot_selected, {\n      showModal(\n        modalDialog(\n          title = paste0(input$country, \" - \", input$sales_plot_selected)\n        )\n      )\n    })\n  },\n  options = list(height = 200)\n)\n```\n:::\n\n\n4. Add a new `renderPLot()` function, and name it `output$montly_sales`. Inside,\nadd the full code from the **Plot data by month** section in the previous unit.\nMake sure to replace `country` and `year`, with `input$country`, and \n`input$sales_plot_selected` respectively. Make sure to prefix `!!` when adding\nthem to the `filter()` call\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshinyApp(\n  ui = fluidPage(\n    selectInput(\"country\", \"Country:\", choices = countries, selected = \"FRANCE\"),\n    girafeOutput(\"sales_plot\")\n  ),\n  server = function(input, output) {\n    output$sales_plot <- renderGirafe({\n      sales_by_year <- prep_orders |>\n        filter(n_name == !!input$country) |>\n        group_by(order_year) |>\n        summarise(\n          total_price = sum(o_totalprice, na.rm = TRUE)\n        ) |>\n        collect()\n\n      breaks <- as.double(quantile(c(0, max(sales_by_year$total_price))))\n      breaks_labels <- paste(round(breaks / 1000000000, 1), \"B\")\n\n      g <- sales_by_year |>\n        ggplot() +\n        geom_col_interactive(aes(order_year, total_price, data_id = order_year, tooltip = total_price)) +\n        scale_x_continuous(breaks = unique(sales_by_year$order_year)) +\n        scale_y_continuous(breaks = breaks, labels = breaks_labels) +\n        xlab(\"Year\") +\n        ylab(\"Total Sales\") +\n        labs(title = \"Sales by year\", subtitle = input$country) +\n        theme_light()\n\n      girafe(ggobj = g, options = list(opts_selection(type = \"single\")))\n    })\n\n    output$monthly_sales <- renderPlot({\n      sales_by_month <- prep_orders |>\n        filter(\n          n_name == !!input$country, \n          order_year == !!input$sales_plot_selected\n          ) |>\n        group_by(order_month) |>\n        summarise(\n          total_price = sum(o_totalprice, na.rm = TRUE)\n        ) |>\n        collect()\n\n      breaks <- as.double(quantile(c(0, max(sales_by_month$total_price))))\n      breaks_labels <- paste(round(breaks / 1000000000, 1), \"B\")\n\n      sales_by_month |>\n        ggplot() +\n        geom_col(aes(order_month, total_price)) +\n        scale_x_continuous(breaks = unique(sales_by_month$order_month)) +\n        scale_y_continuous(breaks = breaks, labels = breaks_labels) +\n        xlab(\"Year\") +\n        ylab(\"Total Sales\") +\n        labs(\n          title = \"Sales by month\", \n          subtitle = paste0(input$country, \" - \", input$sales_plot_selected)\n          ) +\n        theme_light()\n    })\n\n    observeEvent(input$sales_plot_selected, {\n      showModal(\n        modalDialog(\n          title = paste0(input$country, \" - \", input$sales_plot_selected)\n        )\n      )\n    })\n  },\n  options = list(height = 200)\n)\n```\n:::\n\n\n5. Finally, add `plotOutput(\"monthly_sales\")` to the `modelDialog()` call\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshinyApp(\n  ui = fluidPage(\n    selectInput(\"country\", \"Country:\", choices = countries, selected = \"FRANCE\"),\n    girafeOutput(\"sales_plot\")\n  ),\n  server = function(input, output) {\n    output$sales_plot <- renderGirafe({\n      sales_by_year <- prep_orders |>\n        filter(n_name == !!input$country) |>\n        group_by(order_year) |>\n        summarise(\n          total_price = sum(o_totalprice, na.rm = TRUE)\n        ) |>\n        collect()\n\n      breaks <- as.double(quantile(c(0, max(sales_by_year$total_price))))\n      breaks_labels <- paste(round(breaks / 1000000000, 1), \"B\")\n\n      g <- sales_by_year |>\n        ggplot() +\n        geom_col_interactive(aes(order_year, total_price, data_id = order_year, tooltip = total_price)) +\n        scale_x_continuous(breaks = unique(sales_by_year$order_year)) +\n        scale_y_continuous(breaks = breaks, labels = breaks_labels) +\n        xlab(\"Year\") +\n        ylab(\"Total Sales\") +\n        labs(title = \"Sales by year\", subtitle = input$country) +\n        theme_light()\n\n      girafe(ggobj = g, options = list(opts_selection(type = \"single\")))\n    })\n\n    output$monthly_sales <- renderPlot({\n      sales_by_month <- prep_orders |>\n        filter(\n          n_name == !!input$country, \n          order_year == !!input$sales_plot_selected\n          ) |>\n        group_by(order_month) |>\n        summarise(\n          total_price = sum(o_totalprice, na.rm = TRUE)\n        ) |>\n        collect()\n\n      breaks <- as.double(quantile(c(0, max(sales_by_month$total_price))))\n      breaks_labels <- paste(round(breaks / 1000000000, 1), \"B\")\n\n      sales_by_month |>\n        ggplot() +\n        geom_col(aes(order_month, total_price)) +\n        scale_x_continuous(breaks = unique(sales_by_month$order_month)) +\n        scale_y_continuous(breaks = breaks, labels = breaks_labels) +\n        xlab(\"Year\") +\n        ylab(\"Total Sales\") +\n        labs(\n          title = \"Sales by month\", \n          subtitle = paste0(input$country, \" - \", input$sales_plot_selected)\n          ) +\n        theme_light()\n    })\n\n    observeEvent(input$sales_plot_selected, {\n      showModal(\n        modalDialog(\n          title = paste0(input$country, \" - \", input$sales_plot_selected),\n          plotOutput(\"monthly_sales\")\n        )\n      )\n    })\n  },\n  options = list(height = 200)\n)\n```\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}