{
  "hash": "2fbc246aef26d5e473312d057958ad80",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Dashboards\"\nexecute: \n  eval: true\n  freeze: true\n---\n\n\n\n\n## Catch up {.unnumbered}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(dbplyr)\nlibrary(DBI)\n\ncon <- dbConnect(\n  odbc::databricks(),\n  HTTPPath = \"/sql/1.0/warehouses/300bd24ba12adf8e\"\n)\n\norders <- tbl(con, I(\"samples.tpch.orders\"))\ncustomers <- tbl(con, I(\"samples.tpch.customer\"))\nnation <- tbl(con, I(\"samples.tpch.nation\"))\n\nprep_orders <- orders %>% \n  left_join(customers, by = c(\"o_custkey\" = \"c_custkey\")) %>% \n  left_join(nation, by = c(\"c_nationkey\" = \"n_nationkey\")) %>% \n  mutate(\n    order_year = year(o_orderdate), \n    order_month = month(o_orderdate)\n  ) %>% \n  rename(customer = o_custkey) %>% \n  select(-ends_with(\"comment\"),  -ends_with(\"key\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\nlibrary(ggplot2)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncountries <- nation %>% \n  pull(n_name)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nshinyApp(\n  ui = fluidPage(\n    selectInput(\"country\", \"Country:\", choices = countries, selected = \"FRANCE\"),\n    plotOutput(\"sales_plot\")\n  ),\n  server = function(input, output) {\n    output$sales_plot <- renderPlot({\n      sales_by_year <- prep_orders %>%\n        filter(n_name == !!input$country) %>%\n        group_by(order_year) %>%\n        summarise(\n          total_price = sum(o_totalprice, na.rm = TRUE)\n        ) %>%\n        collect()\n\n      breaks <- as.double(quantile(c(0, max(sales_by_year$total_price))))\n      breaks_labels <- paste(round(breaks / 1000000000, 1), \"B\")\n\n      sales_by_year %>%\n        ggplot() +\n        geom_col(aes(order_year, total_price)) +\n        scale_x_continuous(breaks = unique(sales_by_year$order_year)) +\n        scale_y_continuous(breaks = breaks, labels = breaks_labels) +\n        xlab(\"Year\") +\n        ylab(\"Total Sales\") +\n        labs(title = \"Sales by year\", subtitle = input$country) +\n        theme_light()\n    })\n  },\n  options = list(height = 200)\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggiraph)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nshinyApp(\n  ui = fluidPage(\n    selectInput(\"country\", \"Country:\", choices = countries, selected = \"FRANCE\"),\n    girafeOutput(\"sales_plot\")\n  ),\n  server = function(input, output) {\n    output$sales_plot <- renderGirafe({\n      sales_by_year <- prep_orders %>%\n        filter(n_name == !!input$country) %>%\n        group_by(order_year) %>%\n        summarise(\n          total_price = sum(o_totalprice, na.rm = TRUE)\n        ) %>%\n        collect()\n\n      breaks <- as.double(quantile(c(0, max(sales_by_year$total_price))))\n      breaks_labels <- paste(round(breaks / 1000000000, 1), \"B\")\n\n      g <- sales_by_year %>%\n        ggplot() +\n        geom_col_interactive(aes(order_year, total_price, data_id = order_year, tooltip = total_price)) +\n        scale_x_continuous(breaks = unique(sales_by_year$order_year)) +\n        scale_y_continuous(breaks = breaks, labels = breaks_labels) +\n        xlab(\"Year\") +\n        ylab(\"Total Sales\") +\n        labs(title = \"Sales by year\", subtitle = input$country) +\n        theme_light()\n\n      girafe(ggobj = g, options = list(opts_selection(type = \"single\")))\n    })\n\n    output$monthly_sales <- renderPlot({\n      sales_by_month <- prep_orders %>%\n        filter(n_name == !!input$country, order_year == !!input$sales_plot_selected) %>%\n        group_by(order_month) %>%\n        summarise(\n          total_price = sum(o_totalprice, na.rm = TRUE)\n        ) %>%\n        collect()\n\n      breaks <- as.double(quantile(c(0, max(sales_by_month$total_price))))\n      breaks_labels <- paste(round(breaks / 1000000000, 1), \"B\")\n\n      sales_by_month %>%\n        ggplot() +\n        geom_col(aes(order_month, total_price)) +\n        scale_x_continuous(breaks = unique(sales_by_month$order_month)) +\n        scale_y_continuous(breaks = breaks, labels = breaks_labels) +\n        xlab(\"Year\") +\n        ylab(\"Total Sales\") +\n        labs(title = \"Sales by month\", subtitle = paste0(input$country, \" - \", input$sales_plot_selected)) +\n        theme_light()\n    })\n\n    observeEvent(input$sales_plot_selected, {\n      showModal(\n        modalDialog(\n          title = paste0(input$country, \" - \", input$sales_plot_selected),\n          plotOutput(\"monthly_sales\")\n        )\n      )\n    })\n  },\n  options = list(height = 200)\n)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}