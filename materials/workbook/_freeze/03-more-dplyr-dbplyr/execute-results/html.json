{
  "hash": "4dc8e5ca25426562f6be131d2a350071",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"More about dplyr and dbplyr\"\nexecute: \n  eval: true\n  freeze: true\n---\n\n\n\n\n## Data collection\n*Understand the difference between printing and collecting*\n\n0. Catch up\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(dbplyr)\nlibrary(DBI)\n\ncon <- dbConnect(\n  odbc::databricks(),\n  HTTPPath = \"/sql/1.0/warehouses/300bd24ba12adf8e\"\n)\n\ntbl_diamonds <- tbl(con, \"diamonds\")\n```\n:::\n\n\n\n1. Call the `tbl_diamonds` variable directly\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntbl_diamonds\n#> # Source:   table<`diamonds`> [?? x 11]\n#> # Database: Spark SQL 3.1.1[token@Spark SQL/hive_metastore]\n#>    `_c0` carat cut       color clarity depth table price     x     y     z\n#>    <int> <dbl> <chr>     <chr> <chr>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>\n#>  1     1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n#>  2     2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n#>  3     3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n#>  4     4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n#>  5     5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n#>  6     6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n#>  7     7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47\n#>  8     8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53\n#>  9     9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49\n#> 10    10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39\n#> # ℹ more rows\n```\n:::\n\n\n2. Call `tbl_diamonds` via `print()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(tbl_diamonds)\n#> # Source:   table<`diamonds`> [?? x 11]\n#> # Database: Spark SQL 3.1.1[token@Spark SQL/hive_metastore]\n#>    `_c0` carat cut       color clarity depth table price     x     y     z\n#>    <int> <dbl> <chr>     <chr> <chr>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>\n#>  1     1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n#>  2     2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n#>  3     3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n#>  4     4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n#>  5     5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n#>  6     6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n#>  7     7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47\n#>  8     8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53\n#>  9     9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49\n#> 10    10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39\n#> # ℹ more rows\n```\n:::\n\n\n3. Call `tbl_diamonds` via `collect()`. Notice it prints the **entire** table \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncollect(tbl_diamonds)\n#> # A tibble: 53,940 × 11\n#>    `_c0` carat cut       color clarity depth table price     x     y     z\n#>    <int> <dbl> <chr>     <chr> <chr>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>\n#>  1     1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n#>  2     2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n#>  3     3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n#>  4     4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n#>  5     5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n#>  6     6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n#>  7     7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47\n#>  8     8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53\n#>  9     9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49\n#> 10    10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39\n#> # ℹ 53,930 more rows\n```\n:::\n\n\n4. Load the previous operation to a variable named `local_diamonds`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlocal_diamonds <- collect(tbl_diamonds)\n```\n:::\n\n\n5. Use `pull()` to extract the values from `price` only\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntbl_diamonds %>% \n  pull(price)\n```\n:::\n\n\n6. Load the previous operation to a variable named `price`. Notice that this time,\nthe variable is a vector, not a data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprice <- tbl_diamonds %>% \n  pull(price)\n```\n:::\n\n\n## Referring to non-default catalog tables\n*Using I() to create non-default table references*\n\n1. Create a reference to the `customer` table, which is under the `tpch` schema, \ninside the `samples` catalog\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntbl(con, I(\"samples.tpch.customer\"))\n#> # Source:   table<samples.tpch.customer> [?? x 8]\n#> # Database: Spark SQL 3.1.1[token@Spark SQL/hive_metastore]\n#>    c_custkey c_name         c_address c_nationkey c_phone c_acctbal c_mktsegment\n#>      <int64> <chr>          <chr>         <int64> <chr>       <dbl> <chr>       \n#>  1    412445 Customer#0004… \"0QAB3Oj…          21 31-421…     5358. BUILDING    \n#>  2    412446 Customer#0004… \"5u8MSby…          20 30-487…     9442. MACHINERY   \n#>  3    412447 Customer#0004… \"HC4ZT62…           7 17-797…     7869. AUTOMOBILE  \n#>  4    412448 Customer#0004… \"hJok1MM…           6 16-541…     6061. MACHINERY   \n#>  5    412449 Customer#0004… \"zAt1nZN…          14 24-710…     4974. HOUSEHOLD   \n#>  6    412450 Customer#0004… \"fUD6IoG…          20 30-293…     4406. BUILDING    \n#>  7    412451 Customer#0004… \"W2Ge0Qd…          20 30-590…     2290. BUILDING    \n#>  8    412452 Customer#0004… \"Ij4xiPI…          10 20-492…     3427. AUTOMOBILE  \n#>  9    412453 Customer#0004… \"4DmSxDP…          21 31-480…     4592. MACHINERY   \n#> 10    412454 Customer#0004… \"ZQfKDMU…           9 19-898…     2036. FURNITURE   \n#> # ℹ more rows\n#> # ℹ 1 more variable: c_comment <chr>\n```\n:::\n\n\n2. Create a reference to the `sales_order_in_la` table, under the `ferit` schema\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntbl(con, I(\"ferit.sales_order_in_la\"))\n#> # Source:   table<ferit.sales_order_in_la> [?? x 7]\n#> # Database: Spark SQL 3.1.1[token@Spark SQL/hive_metastore]\n#>    order_date city        customer_id customer_name      currency sales quantity\n#>    <date>     <chr>       <chr>       <chr>              <chr>    <int>  <int64>\n#>  1 2019-09-27 Los Angeles 14120673    DEL MONICO,  DOMI… USD       1166        2\n#>  2 2019-08-30 Los Angeles 12593702    SAUTKUS,  LAURA    USD       1250        8\n#>  3 2019-11-12 Los Angeles 14159223    ROBERTS,  ALAN E   USD         98        2\n#>  4 2019-10-15 Los Angeles 13005776    SAUTKUS,  LAURA    USD        731        4\n#>  5 2019-08-23 Los Angeles 14501552    osborn paper co    USD       2180        3\n#>  6 2019-09-03 Los Angeles 13265811    RYCHTANEK,  NICOLE USD         72        3\n#>  7 2019-10-16 Los Angeles 12947406    epikos church      USD       2529        3\n#>  8 2019-08-08 Los Angeles 15171127    GORZEN,  WALDEMAR… USD       1207        6\n#>  9 2019-08-16 Los Angeles 14065091    VARGAS,  DAVID     USD        349        2\n#> 10 2019-10-08 Los Angeles 13999146    SEGOVIA,  VICTOR M USD       2092        5\n#> # ℹ more rows\n```\n:::\n\n\n## Selecting variables\n*Simple strategies to order, and reduce, data to work with*\n\n1. Load the `customer` table to a variable called `customer` \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncustomer <- tbl(con, I(\"samples.tpch.customer\"))\n```\n:::\n\n2. Select all columns that end with \"key\"\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncustomer %>% \n  select(ends_with(\"key\"))\n#> # Source:   SQL [?? x 2]\n#> # Database: Spark SQL 3.1.1[token@Spark SQL/hive_metastore]\n#>    c_custkey c_nationkey\n#>      <int64>     <int64>\n#>  1    412445          21\n#>  2    412446          20\n#>  3    412447           7\n#>  4    412448           6\n#>  5    412449          14\n#>  6    412450          20\n#>  7    412451          20\n#>  8    412452          10\n#>  9    412453          21\n#> 10    412454           9\n#> # ℹ more rows\n```\n:::\n\n\n3. Move all columns that end with \"key\" to the front\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncustomer %>% \n  select(ends_with(\"key\"), everything())\n#> # Source:   SQL [?? x 8]\n#> # Database: Spark SQL 3.1.1[token@Spark SQL/hive_metastore]\n#>    c_custkey c_nationkey c_name         c_address c_phone c_acctbal c_mktsegment\n#>      <int64>     <int64> <chr>          <chr>     <chr>       <dbl> <chr>       \n#>  1    412445          21 Customer#0004… \"0QAB3Oj… 31-421…     5358. BUILDING    \n#>  2    412446          20 Customer#0004… \"5u8MSby… 30-487…     9442. MACHINERY   \n#>  3    412447           7 Customer#0004… \"HC4ZT62… 17-797…     7869. AUTOMOBILE  \n#>  4    412448           6 Customer#0004… \"hJok1MM… 16-541…     6061. MACHINERY   \n#>  5    412449          14 Customer#0004… \"zAt1nZN… 24-710…     4974. HOUSEHOLD   \n#>  6    412450          20 Customer#0004… \"fUD6IoG… 30-293…     4406. BUILDING    \n#>  7    412451          20 Customer#0004… \"W2Ge0Qd… 30-590…     2290. BUILDING    \n#>  8    412452          10 Customer#0004… \"Ij4xiPI… 20-492…     3427. AUTOMOBILE  \n#>  9    412453          21 Customer#0004… \"4DmSxDP… 31-480…     4592. MACHINERY   \n#> 10    412454           9 Customer#0004… \"ZQfKDMU… 19-898…     2036. FURNITURE   \n#> # ℹ more rows\n#> # ℹ 1 more variable: c_comment <chr>\n```\n:::\n\n\n4. Select all columns that **do not** end with \"key\"\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncustomer %>% \n  select(-ends_with(\"key\"))\n#> # Source:   SQL [?? x 6]\n#> # Database: Spark SQL 3.1.1[token@Spark SQL/hive_metastore]\n#>    c_name             c_address         c_phone c_acctbal c_mktsegment c_comment\n#>    <chr>              <chr>             <chr>       <dbl> <chr>        <chr>    \n#>  1 Customer#000412445 \"0QAB3OjYnbP6mA0… 31-421…     5358. BUILDING     \"arefull…\n#>  2 Customer#000412446 \"5u8MSbyiC7J,7Pu… 30-487…     9442. MACHINERY    \"sleep a…\n#>  3 Customer#000412447 \"HC4ZT62gKPgrjr … 17-797…     7869. AUTOMOBILE   \"aggle b…\n#>  4 Customer#000412448 \"hJok1MMrDgH\"     16-541…     6061. MACHINERY    \"ly sile…\n#>  5 Customer#000412449 \"zAt1nZNG01gOhIq… 24-710…     4974. HOUSEHOLD    \"refully…\n#>  6 Customer#000412450 \"fUD6IoGdtF\"      30-293…     4406. BUILDING     \"refully…\n#>  7 Customer#000412451 \"W2Ge0Qd8adH\"     30-590…     2290. BUILDING     \"slow as…\n#>  8 Customer#000412452 \"Ij4xiPIeNEP1uR5… 20-492…     3427. AUTOMOBILE   \"sleep s…\n#>  9 Customer#000412453 \"4DmSxDPMmfidKQB… 31-480…     4592. MACHINERY    \" agains…\n#> 10 Customer#000412454 \"ZQfKDMUyEfn\"     19-898…     2036. FURNITURE    \" quickl…\n#> # ℹ more rows\n```\n:::\n\n\n\n## Join to tables\n**Using left_join() to relate two tables**\n\n1. Load the `nation` table into a variable called the same\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnation <- tbl(con, I(\"samples.tpch.nation\"))\n```\n:::\n\n\n2. Use `left_join` to relate `customer` with `nation` using the nation key \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncustomer %>% \n  left_join(nation, by = c(\"c_nationkey\" = \"n_nationkey\"))\n#> # Source:   SQL [?? x 11]\n#> # Database: Spark SQL 3.1.1[token@Spark SQL/hive_metastore]\n#>    c_custkey c_name         c_address c_nationkey c_phone c_acctbal c_mktsegment\n#>      <int64> <chr>          <chr>         <int64> <chr>       <dbl> <chr>       \n#>  1    412445 Customer#0004… \"0QAB3Oj…          21 31-421…     5358. BUILDING    \n#>  2    412446 Customer#0004… \"5u8MSby…          20 30-487…     9442. MACHINERY   \n#>  3    412447 Customer#0004… \"HC4ZT62…           7 17-797…     7869. AUTOMOBILE  \n#>  4    412448 Customer#0004… \"hJok1MM…           6 16-541…     6061. MACHINERY   \n#>  5    412449 Customer#0004… \"zAt1nZN…          14 24-710…     4974. HOUSEHOLD   \n#>  6    412450 Customer#0004… \"fUD6IoG…          20 30-293…     4406. BUILDING    \n#>  7    412451 Customer#0004… \"W2Ge0Qd…          20 30-590…     2290. BUILDING    \n#>  8    412452 Customer#0004… \"Ij4xiPI…          10 20-492…     3427. AUTOMOBILE  \n#>  9    412453 Customer#0004… \"4DmSxDP…          21 31-480…     4592. MACHINERY   \n#> 10    412454 Customer#0004… \"ZQfKDMU…           9 19-898…     2036. FURNITURE   \n#> # ℹ more rows\n#> # ℹ 4 more variables: c_comment <chr>, n_name <chr>, n_regionkey <int64>,\n#> #   n_comment <chr>\n```\n:::\n\n\n3. What are the 5 countries with the most customers?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncustomer %>% \n  left_join(nation, by = c(\"c_nationkey\" = \"n_nationkey\")) %>% \n  count(n_name, sort = TRUE) %>% \n  head(5)\n#> # Source:     SQL [5 x 2]\n#> # Database:   Spark SQL 3.1.1[token@Spark SQL/hive_metastore]\n#> # Ordered by: desc(n)\n#>   n_name          n\n#>   <chr>     <int64>\n#> 1 INDONESIA   30401\n#> 2 IRAN        30257\n#> 3 INDIA       30234\n#> 4 IRAQ        30232\n#> 5 ETHIOPIA    30201\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}