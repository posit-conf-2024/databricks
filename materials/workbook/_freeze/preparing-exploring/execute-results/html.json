{
  "hash": "c6341a3f411c27bd54a0656da0a84192",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Preparing and exploring Data\"\nexecute: \n  eval: true\n  freeze: true\n  warning: false\n---\n\n\n\n\n\n\n\n## Catch up {.unnumbered}\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(dbplyr)\nlibrary(DBI)\n\ncon <- dbConnect(\n  odbc::databricks(),\n  HTTPPath = \"/sql/1.0/warehouses/300bd24ba12adf8e\"\n)\n```\n:::\n\n\n\n\n\n## Selecting variables\n*Simple strategies to order, and reduce, data to work with*\n\n1. Load the `customer` table to a variable called `customer` \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncustomer <- tbl(con, I(\"workshops.tpch.customer\"))\n```\n:::\n\n\n\n\n\n2. Select all columns that end with \"key\"\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncustomer |> \n  select(ends_with(\"key\"))\n#> # Source:   SQL [?? x 2]\n#> # Database: Spark SQL 3.1.1[token@Spark SQL/hive_metastore]\n#>    c_custkey c_nationkey\n#>        <dbl>       <dbl>\n#>  1         1          15\n#>  2         2          13\n#>  3         3           1\n#>  4         4           4\n#>  5         5           3\n#>  6         6          20\n#>  7         7          18\n#>  8         8          17\n#>  9         9           8\n#> 10        10           5\n#> # ℹ more rows\n```\n:::\n\n\n\n\n\n3. Move all columns that end with \"key\" to the front\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncustomer |> \n  select(ends_with(\"key\"), everything())\n#> # Source:   SQL [?? x 8]\n#> # Database: Spark SQL 3.1.1[token@Spark SQL/hive_metastore]\n#>    c_custkey c_nationkey c_name         c_address c_phone c_acctbal c_mktsegment\n#>        <dbl>       <dbl> <chr>          <chr>     <chr>       <dbl> <chr>       \n#>  1         1          15 Customer#0000… IVhzIApe… 25-989…      712. BUILDING    \n#>  2         2          13 Customer#0000… XSTf4,NC… 23-768…      122. AUTOMOBILE  \n#>  3         3           1 Customer#0000… MG9kdTD2… 11-719…     7498. AUTOMOBILE  \n#>  4         4           4 Customer#0000… XxVSJsLA… 14-128…     2867. MACHINERY   \n#>  5         5           3 Customer#0000… KvpyuHCp… 13-750…      794. HOUSEHOLD   \n#>  6         6          20 Customer#0000… sKZz0Csn… 30-114…     7639. AUTOMOBILE  \n#>  7         7          18 Customer#0000… TcGe5gaZ… 28-190…     9562. AUTOMOBILE  \n#>  8         8          17 Customer#0000… I0B10bB0… 27-147…     6820. BUILDING    \n#>  9         9           8 Customer#0000… xKiAFTjU… 18-338…     8324. FURNITURE   \n#> 10        10           5 Customer#0000… 6LrEaV6K… 15-741…     2754. HOUSEHOLD   \n#> # ℹ more rows\n#> # ℹ 1 more variable: c_comment <chr>\n```\n:::\n\n\n\n\n\n4. Select all columns that **do not** end with \"key\"\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncustomer |> \n  select(-ends_with(\"key\"))\n#> # Source:   SQL [?? x 6]\n#> # Database: Spark SQL 3.1.1[token@Spark SQL/hive_metastore]\n#>    c_name             c_address         c_phone c_acctbal c_mktsegment c_comment\n#>    <chr>              <chr>             <chr>       <dbl> <chr>        <chr>    \n#>  1 Customer#000000001 IVhzIApeRb ot,c,E 25-989…      712. BUILDING     \"to the …\n#>  2 Customer#000000002 XSTf4,NCwDVaWNe6… 23-768…      122. AUTOMOBILE   \"l accou…\n#>  3 Customer#000000003 MG9kdTD2WBHm      11-719…     7498. AUTOMOBILE   \" deposi…\n#>  4 Customer#000000004 XxVSJsLAGtn       14-128…     2867. MACHINERY    \" reques…\n#>  5 Customer#000000005 KvpyuHCplrB84WgA… 13-750…      794. HOUSEHOLD    \"n accou…\n#>  6 Customer#000000006 sKZz0CsnMD7mp4Xd… 30-114…     7639. AUTOMOBILE   \"tions. …\n#>  7 Customer#000000007 TcGe5gaZNgVePxU5… 28-190…     9562. AUTOMOBILE   \"ainst t…\n#>  8 Customer#000000008 I0B10bB0AymmC, 0… 27-147…     6820. BUILDING     \"among t…\n#>  9 Customer#000000009 xKiAFTjUsCuxfele… 18-338…     8324. FURNITURE    \"r theod…\n#> 10 Customer#000000010 6LrEaV6KR6PLVcgl… 15-741…     2754. HOUSEHOLD    \"es regu…\n#> # ℹ more rows\n```\n:::\n\n\n\n\n\n\n## Join to tables\n**Using left_join() to relate two tables**\n\n1. Load the `nation` table into a variable called the same\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnation <- tbl(con, I(\"workshops.tpch.nation\"))\n```\n:::\n\n\n\n\n\n2. Use `left_join` to relate `customer` with `nation` using the nation key \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncustomer |> \n  left_join(nation, by = c(\"c_nationkey\" = \"n_nationkey\"))\n#> # Source:   SQL [?? x 11]\n#> # Database: Spark SQL 3.1.1[token@Spark SQL/hive_metastore]\n#>    c_custkey c_name         c_address c_nationkey c_phone c_acctbal c_mktsegment\n#>        <dbl> <chr>          <chr>           <dbl> <chr>       <dbl> <chr>       \n#>  1         1 Customer#0000… IVhzIApe…          15 25-989…      712. BUILDING    \n#>  2         2 Customer#0000… XSTf4,NC…          13 23-768…      122. AUTOMOBILE  \n#>  3         3 Customer#0000… MG9kdTD2…           1 11-719…     7498. AUTOMOBILE  \n#>  4         4 Customer#0000… XxVSJsLA…           4 14-128…     2867. MACHINERY   \n#>  5         5 Customer#0000… KvpyuHCp…           3 13-750…      794. HOUSEHOLD   \n#>  6         6 Customer#0000… sKZz0Csn…          20 30-114…     7639. AUTOMOBILE  \n#>  7         7 Customer#0000… TcGe5gaZ…          18 28-190…     9562. AUTOMOBILE  \n#>  8         8 Customer#0000… I0B10bB0…          17 27-147…     6820. BUILDING    \n#>  9         9 Customer#0000… xKiAFTjU…           8 18-338…     8324. FURNITURE   \n#> 10        10 Customer#0000… 6LrEaV6K…           5 15-741…     2754. HOUSEHOLD   \n#> # ℹ more rows\n#> # ℹ 4 more variables: c_comment <chr>, n_name <chr>, n_regionkey <dbl>,\n#> #   n_comment <chr>\n```\n:::\n\n\n\n\n\n3. What are the 5 countries with the most customers?\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncustomer |> \n  left_join(nation, by = c(\"c_nationkey\" = \"n_nationkey\")) |> \n  count(n_name, sort = TRUE) |> \n  head(5)\n#> # Source:     SQL [5 x 2]\n#> # Database:   Spark SQL 3.1.1[token@Spark SQL/hive_metastore]\n#> # Ordered by: desc(n)\n#>   n_name              n\n#>   <chr>         <int64>\n#> 1 UNITED STATES    1260\n#> 2 IRAQ             1249\n#> 3 IRAN             1248\n#> 4 CHINA            1244\n#> 5 EGYPT            1225\n```\n:::\n\n\n\n\n\n## Prepare base \n*Building the base variable/query*\n\n1. Load the `orders` table in a variable called `orders`\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\norders <- tbl(con, I(\"workshops.tpch.orders\"))\n```\n:::\n\n\n\n\n\n2. Join `orders` to the `customer` variable (table). Relate them on the\n`o_custkey` and `c_custkey` fields.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\norders |> \n  left_join(customer, by = c(\"o_custkey\" = \"c_custkey\"))\n#> # Source:   SQL [?? x 16]\n#> # Database: Spark SQL 3.1.1[token@Spark SQL/hive_metastore]\n#>    o_orderkey o_custkey o_orderstatus o_totalprice o_orderdate order_priority \n#>         <dbl>     <dbl> <chr>                <dbl> <date>      <chr>          \n#>  1          1      7381 O                  181585. 1996-01-02  5-LOW          \n#>  2          2     15601 O                   46094. 1996-12-01  1-URGENT       \n#>  3          3     24664 F                  271423. 1993-10-14  5-LOW          \n#>  4          4     27356 O                   47915. 1995-10-11  5-LOW          \n#>  5          5      8897 F                  136702. 1994-07-30  5-LOW          \n#>  6          6     11125 F                   65071. 1992-02-21  4-NOT SPECIFIED\n#>  7          7      7828 O                  263865. 1996-01-10  2-HIGH         \n#>  8         32     26012 O                  153480. 1995-07-16  2-HIGH         \n#>  9         33     13393 F                  138123. 1993-10-27  3-MEDIUM       \n#> 10         34     12202 O                   72249. 1998-07-21  3-MEDIUM       \n#> # ℹ more rows\n#> # ℹ 10 more variables: o_clerk <chr>, o_shippriority <dbl>, o_comment <chr>,\n#> #   c_name <chr>, c_address <chr>, c_nationkey <dbl>, c_phone <chr>,\n#> #   c_acctbal <dbl>, c_mktsegment <chr>, c_comment <chr>\n```\n:::\n\n\n\n\n\n3. Join the `nation` variable/table to the `orders` and `customer` variables. \nUse the `c_nationkey` and the `n_nationkey` to relate them.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\norders |> \n  left_join(customer, by = c(\"o_custkey\" = \"c_custkey\")) |> \n  left_join(nation, by = c(\"c_nationkey\" = \"n_nationkey\"))\n#> # Source:   SQL [?? x 19]\n#> # Database: Spark SQL 3.1.1[token@Spark SQL/hive_metastore]\n#>    o_orderkey o_custkey o_orderstatus o_totalprice o_orderdate order_priority \n#>         <dbl>     <dbl> <chr>                <dbl> <date>      <chr>          \n#>  1          1      7381 O                  181585. 1996-01-02  5-LOW          \n#>  2          2     15601 O                   46094. 1996-12-01  1-URGENT       \n#>  3          3     24664 F                  271423. 1993-10-14  5-LOW          \n#>  4          4     27356 O                   47915. 1995-10-11  5-LOW          \n#>  5          5      8897 F                  136702. 1994-07-30  5-LOW          \n#>  6          6     11125 F                   65071. 1992-02-21  4-NOT SPECIFIED\n#>  7          7      7828 O                  263865. 1996-01-10  2-HIGH         \n#>  8         32     26012 O                  153480. 1995-07-16  2-HIGH         \n#>  9         33     13393 F                  138123. 1993-10-27  3-MEDIUM       \n#> 10         34     12202 O                   72249. 1998-07-21  3-MEDIUM       \n#> # ℹ more rows\n#> # ℹ 13 more variables: o_clerk <chr>, o_shippriority <dbl>, o_comment <chr>,\n#> #   c_name <chr>, c_address <chr>, c_nationkey <dbl>, c_phone <chr>,\n#> #   c_acctbal <dbl>, c_mktsegment <chr>, c_comment <chr>, n_name <chr>,\n#> #   n_regionkey <dbl>, n_comment <chr>\n```\n:::\n\n\n\n\n\n4. Load the resulting code into a variable called `rel_orders`. **We do this \nso to get autocomplete working**\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrel_orders <- orders |> \n  left_join(customer, by = c(\"o_custkey\" = \"c_custkey\")) |> \n  left_join(nation, by = c(\"c_nationkey\" = \"n_nationkey\"))\n```\n:::\n\n\n\n\n\n5. Create new columns for the year of the order date, and another for the\nmonth of the order date. Name them `order_year` and `order_month` respectively.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrel_orders |> \n  mutate(order_year = year(o_orderdate), order_month = month(o_orderdate))\n#> # Source:   SQL [?? x 21]\n#> # Database: Spark SQL 3.1.1[token@Spark SQL/hive_metastore]\n#>    o_orderkey o_custkey o_orderstatus o_totalprice o_orderdate order_priority \n#>         <dbl>     <dbl> <chr>                <dbl> <date>      <chr>          \n#>  1          1      7381 O                  181585. 1996-01-02  5-LOW          \n#>  2          2     15601 O                   46094. 1996-12-01  1-URGENT       \n#>  3          3     24664 F                  271423. 1993-10-14  5-LOW          \n#>  4          4     27356 O                   47915. 1995-10-11  5-LOW          \n#>  5          5      8897 F                  136702. 1994-07-30  5-LOW          \n#>  6          6     11125 F                   65071. 1992-02-21  4-NOT SPECIFIED\n#>  7          7      7828 O                  263865. 1996-01-10  2-HIGH         \n#>  8         32     26012 O                  153480. 1995-07-16  2-HIGH         \n#>  9         33     13393 F                  138123. 1993-10-27  3-MEDIUM       \n#> 10         34     12202 O                   72249. 1998-07-21  3-MEDIUM       \n#> # ℹ more rows\n#> # ℹ 15 more variables: o_clerk <chr>, o_shippriority <dbl>, o_comment <chr>,\n#> #   c_name <chr>, c_address <chr>, c_nationkey <dbl>, c_phone <chr>,\n#> #   c_acctbal <dbl>, c_mktsegment <chr>, c_comment <chr>, n_name <chr>,\n#> #   n_regionkey <dbl>, n_comment <chr>, order_year <int>, order_month <int>\n```\n:::\n\n\n\n\n\n6. Remove any columns that end in \"comment\", and end in \"key\"\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrel_orders |> \n  mutate(order_year = year(o_orderdate), order_month = month(o_orderdate)) |> \n  select(-ends_with(\"comment\"), -ends_with(\"key\")) \n#> # Source:   SQL [?? x 14]\n#> # Database: Spark SQL 3.1.1[token@Spark SQL/hive_metastore]\n#>    o_orderstatus o_totalprice o_orderdate order_priority  o_clerk o_shippriority\n#>    <chr>                <dbl> <date>      <chr>           <chr>            <dbl>\n#>  1 O                  181585. 1996-01-02  5-LOW           Clerk#…              0\n#>  2 O                   46094. 1996-12-01  1-URGENT        Clerk#…              0\n#>  3 F                  271423. 1993-10-14  5-LOW           Clerk#…              0\n#>  4 O                   47915. 1995-10-11  5-LOW           Clerk#…              0\n#>  5 F                  136702. 1994-07-30  5-LOW           Clerk#…              0\n#>  6 F                   65071. 1992-02-21  4-NOT SPECIFIED Clerk#…              0\n#>  7 O                  263865. 1996-01-10  2-HIGH          Clerk#…              0\n#>  8 O                  153480. 1995-07-16  2-HIGH          Clerk#…              0\n#>  9 F                  138123. 1993-10-27  3-MEDIUM        Clerk#…              0\n#> 10 O                   72249. 1998-07-21  3-MEDIUM        Clerk#…              0\n#> # ℹ more rows\n#> # ℹ 8 more variables: c_name <chr>, c_address <chr>, c_phone <chr>,\n#> #   c_acctbal <dbl>, c_mktsegment <chr>, n_name <chr>, order_year <int>,\n#> #   order_month <int>\n```\n:::\n\n\n\n\n\n7. Rename `o_custkey` to `customer`, insert code before the selection\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrel_orders |> \n  mutate(order_year = year(o_orderdate), order_month = month(o_orderdate)) |> \n  rename(customer = o_custkey) |> \n  select(-ends_with(\"comment\"), -ends_with(\"key\")) \n#> # Source:   SQL [?? x 15]\n#> # Database: Spark SQL 3.1.1[token@Spark SQL/hive_metastore]\n#>    customer o_orderstatus o_totalprice o_orderdate order_priority  o_clerk      \n#>       <dbl> <chr>                <dbl> <date>      <chr>           <chr>        \n#>  1     7381 O                  181585. 1996-01-02  5-LOW           Clerk#000000…\n#>  2    15601 O                   46094. 1996-12-01  1-URGENT        Clerk#000000…\n#>  3    24664 F                  271423. 1993-10-14  5-LOW           Clerk#000000…\n#>  4    27356 O                   47915. 1995-10-11  5-LOW           Clerk#000000…\n#>  5     8897 F                  136702. 1994-07-30  5-LOW           Clerk#000000…\n#>  6    11125 F                   65071. 1992-02-21  4-NOT SPECIFIED Clerk#000000…\n#>  7     7828 O                  263865. 1996-01-10  2-HIGH          Clerk#000000…\n#>  8    26012 O                  153480. 1995-07-16  2-HIGH          Clerk#000000…\n#>  9    13393 F                  138123. 1993-10-27  3-MEDIUM        Clerk#000000…\n#> 10    12202 O                   72249. 1998-07-21  3-MEDIUM        Clerk#000000…\n#> # ℹ more rows\n#> # ℹ 9 more variables: o_shippriority <dbl>, c_name <chr>, c_address <chr>,\n#> #   c_phone <chr>, c_acctbal <dbl>, c_mktsegment <chr>, n_name <chr>,\n#> #   order_year <int>, order_month <int>\n```\n:::\n\n\n\n\n\n8. Load resulting code to a variable called `prep_orders`\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprep_orders <- rel_orders |> \n  mutate(order_year = year(o_orderdate), order_month = month(o_orderdate)) |> \n  rename(customer = o_custkey) |> \n  select(-ends_with(\"comment\"), -ends_with(\"key\")) \n```\n:::\n\n\n\n\n\n9. Preview `prep_orders` using `glimpse()`\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprep_orders |> \n  glimpse()\n#> Rows: ??\n#> Columns: 15\n#> Database: Spark SQL 3.1.1[token@Spark SQL/hive_metastore]\n#> $ customer       <dbl> 7381, 15601, 24664, 27356, 8897, 11125, 7828, 26012, 13…\n#> $ o_orderstatus  <chr> \"O\", \"O\", \"F\", \"O\", \"F\", \"F\", \"O\", \"O\", \"F\", \"O\", \"O\", …\n#> $ o_totalprice   <dbl> 181585.13, 46093.67, 271422.96, 47915.12, 136701.72, 65…\n#> $ o_orderdate    <date> 1996-01-02, 1996-12-01, 1993-10-14, 1995-10-11, 1994-0…\n#> $ order_priority <chr> \"5-LOW\", \"1-URGENT\", \"5-LOW\", \"5-LOW\", \"5-LOW\", \"4-NOT …\n#> $ o_clerk        <chr> \"Clerk#000000951\", \"Clerk#000000880\", \"Clerk#000000955\"…\n#> $ o_shippriority <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ c_name         <chr> \"Customer#000007381\", \"Customer#000015601\", \"Customer#0…\n#> $ c_address      <chr> \"uAT93aEOFo7IUvh BMFgRm48hsr7LtPfQJ\", \"T2ALSWGjgRFWLxP4…\n#> $ c_phone        <chr> \"30-666-139-1602\", \"32-397-926-3405\", \"14-383-701-6221\"…\n#> $ c_acctbal      <dbl> 73.39, 7589.86, 570.97, -254.76, 2725.15, 2998.55, 3706…\n#> $ c_mktsegment   <chr> \"BUILDING\", \"HOUSEHOLD\", \"FURNITURE\", \"MACHINERY\", \"BUI…\n#> $ n_name         <chr> \"SAUDI ARABIA\", \"RUSSIA\", \"EGYPT\", \"ETHIOPIA\", \"ARGENTI…\n#> $ order_year     <int> 1996, 1996, 1993, 1995, 1994, 1992, 1996, 1995, 1993, 1…\n#> $ order_month    <int> 1, 12, 10, 10, 7, 2, 1, 7, 10, 7, 10, 11, 6, 8, 9, 7, 3…\n```\n:::\n\n\n\n\n\n\n## Answering questions\n*Using the base query to answer more complex questions*\n\n1. What are the top 5 countries for total amount ordered?\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprep_orders |> \n  group_by(n_name) |> \n  summarise(\n    total_price = sum(o_totalprice, na.rm = TRUE)\n  ) |> \n  arrange(desc(total_price)) |> \n  head(5)\n#> # Source:     SQL [5 x 2]\n#> # Database:   Spark SQL 3.1.1[token@Spark SQL/hive_metastore]\n#> # Ordered by: desc(total_price)\n#>   n_name        total_price\n#>   <chr>               <dbl>\n#> 1 CHINA         1801806199.\n#> 2 UNITED STATES 1774171034.\n#> 3 EGYPT         1771552951.\n#> 4 IRAN          1771537297.\n#> 5 VIETNAM       1771445652.\n```\n:::\n\n\n\n\n\n2. What are the top 5 countries for total amount ordered for 1998?\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprep_orders |> \n  filter(order_year == 1998) |> \n  group_by(n_name) |> \n  summarise(\n    total_price = sum(o_totalprice, na.rm = TRUE)\n  ) |> \n  arrange(desc(total_price)) |> \n  head(5)\n#> # Source:     SQL [5 x 2]\n#> # Database:   Spark SQL 3.1.1[token@Spark SQL/hive_metastore]\n#> # Ordered by: desc(total_price)\n#>   n_name         total_price\n#>   <chr>                <dbl>\n#> 1 CHINA           171553459.\n#> 2 UNITED STATES   171380901.\n#> 3 UNITED KINGDOM  162354578.\n#> 4 IRAN            160671344.\n#> 5 ARGENTINA       160164705.\n```\n:::\n\n\n\n\n\n3. What has been the top (1) country, in orders, by year?\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprep_orders |> \n  group_by(n_name, order_year) |> \n  summarise(\n    total_price = sum(o_totalprice, na.rm = TRUE)\n  ) |> \n  group_by(order_year) |> \n  filter(total_price == max(total_price))\n#> # Source:   SQL [7 x 3]\n#> # Database: Spark SQL 3.1.1[token@Spark SQL/hive_metastore]\n#> # Groups:   order_year\n#>   n_name         order_year total_price\n#>   <chr>               <int>       <dbl>\n#> 1 UNITED KINGDOM       1992  274006542.\n#> 2 VIETNAM              1993  272855530.\n#> 3 INDONESIA            1994  286622681.\n#> 4 EGYPT                1995  281068319.\n#> 5 VIETNAM              1996  281019062.\n#> 6 UNITED STATES        1997  276025595.\n#> 7 CHINA                1998  171553459.\n```\n:::\n\n\n\n\n\n4. Who are the top 5 customers by amount ordered?\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprep_orders |> \n  group_by(customer) |> \n  summarise(\n    total_price = sum(o_totalprice, na.rm = TRUE)\n    ) |> \n  arrange(desc(total_price)) |> \n  head(5)\n#> # Source:     SQL [5 x 2]\n#> # Database:   Spark SQL 3.1.1[token@Spark SQL/hive_metastore]\n#> # Ordered by: desc(total_price)\n#>   customer total_price\n#>      <dbl>       <dbl>\n#> 1      691    6311210.\n#> 2    25936    5917968.\n#> 3    20959    5884257.\n#> 4     4351    5830651.\n#> 5      979    5820310.\n```\n:::\n\n\n\n\n\n5. What is the country, and market segment, of the top 5 customers by amount ordered?\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprep_orders |> \n  group_by(customer) |> \n  summarise(\n    country = first(n_name), \n    segment = first(c_mktsegment),\n    total_price = sum(o_totalprice, na.rm = TRUE)\n    ) |> \n  arrange(desc(total_price)) |> \n  head(5)\n#> # Source:     SQL [5 x 4]\n#> # Database:   Spark SQL 3.1.1[token@Spark SQL/hive_metastore]\n#> # Ordered by: desc(total_price)\n#>   customer country       segment    total_price\n#>      <dbl> <chr>         <chr>            <dbl>\n#> 1      691 MOZAMBIQUE    MACHINERY     6311210.\n#> 2    25936 UNITED STATES HOUSEHOLD     5917968.\n#> 3    20959 GERMANY       BUILDING      5884257.\n#> 4     4351 IRAN          AUTOMOBILE    5830651.\n#> 5      979 CHINA         MACHINERY     5820310.\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}