---
title: "Dashboards"
execute: 
  eval: false
  freeze: false
---

```{r, setup}
#| include: false

library(dplyr)
library(dbplyr)
```

## Catch up {.unnumbered}

```{r}
library(dplyr)
library(dbplyr)
library(DBI)

con <- dbConnect(
  odbc::databricks(),
  HTTPPath = "/sql/1.0/warehouses/300bd24ba12adf8e"
)

orders <- tbl(con, I("samples.tpch.orders"))
customers <- tbl(con, I("samples.tpch.customer"))
nation <- tbl(con, I("samples.tpch.nation"))

prep_orders <- orders %>% 
  left_join(customers, by = c("o_custkey" = "c_custkey")) %>% 
  left_join(nation, by = c("c_nationkey" = "n_nationkey")) %>% 
  mutate(
    order_year = year(o_orderdate), 
    order_month = month(o_orderdate)
  ) %>% 
  rename(customer = o_custkey) %>% 
  select(-ends_with("comment"),  -ends_with("key"))
```

## Initial Shiny app
*Reivew of best practices to create a Shiny app that is connected to Databricks*

1. Load the `shiny` and `ggplot2` libraries

```{r}
library(shiny)
library(ggplot2)
```

2. Run the following code to see the "stub" Shiny app

```{r}
#| eval: false

shinyApp(
  ui = fluidPage(
    selectInput("country", "Country:", choices = "FRANCE", selected = "FRANCE"),
    plotOutput("sales_plot")
  ),
  server = function(input, output) {
    output$sales_plot <- renderPlot({
      # Your code here
    })
  },
  options = list(height = 200)
)
```

3. Retrieve the country names from `nation` into a character vector. Save the
values to a variable called `countries`

```{r}
countries <- nation %>% 
  pull(n_name)
```

4. Preview `countries`

```{r}
countries
```
5. Replace the values of `choices` in the Shiny app. Now use `countries` as its
source. Preview the app, the drop-down should now have the 25 countries as
options

```{r}
#| eval: false

shinyApp(
  ui = fluidPage(
    selectInput("country", "Country:", choices = countries, selected = "FRANCE"),
    plotOutput("sales_plot")
  ),
  server = function(input, output) {
    output$sales_plot <- renderPlot({
      # Your code here
    })
  },
  options = list(height = 200)
)
```

6. Insert the full code that makes the country sales plot, the one in previous
section. It should include the code that creates the local data, and the one
that creates the plot itself. Place them in the area that says *# Your code here*.
Make sure to replace, `country`, with `input$country`. Preview the app.

```{r}
#| eval: false

shinyApp(
  ui = fluidPage(
    selectInput("country", "Country:", choices = countries, selected = "FRANCE"),
    plotOutput("sales_plot")
  ),
  server = function(input, output) {
    output$sales_plot <- renderPlot({
      sales_by_year <- prep_orders %>%
        filter(n_name == input$country) %>%
        group_by(order_year) %>%
        summarise(
          total_price = sum(o_totalprice, na.rm = TRUE)
        ) %>%
        collect()

      breaks <- as.double(quantile(c(0, max(sales_by_year$total_price))))
      breaks_labels <- paste(round(breaks / 1000000000, 1), "B")

      sales_by_year %>%
        ggplot() +
        geom_col(aes(order_year, total_price)) +
        scale_x_continuous(breaks = unique(sales_by_year$order_year)) +
        scale_y_continuous(breaks = breaks, labels = breaks_labels) +
        xlab("Year") +
        ylab("Total Sales") +
        labs(title = "Sales by year", subtitle = input$country) +
        theme_light()
    })
  },
  options = list(height = 200)
)
```

7. Prefix `!!` to the `input$countries` entry where we create the `sales_by_year`
variable. Preview the app.

```{r}
#| eval: false

shinyApp(
  ui = fluidPage(
    selectInput("country", "Country:", choices = countries, selected = "FRANCE"),
    plotOutput("sales_plot")
  ),
  server = function(input, output) {
    output$sales_plot <- renderPlot({
      sales_by_year <- prep_orders %>%
        filter(n_name == !!input$country) %>%
        group_by(order_year) %>%
        summarise(
          total_price = sum(o_totalprice, na.rm = TRUE)
        ) %>%
        collect()

      breaks <- as.double(quantile(c(0, max(sales_by_year$total_price))))
      breaks_labels <- paste(round(breaks / 1000000000, 1), "B")

      sales_by_year %>%
        ggplot() +
        geom_col(aes(order_year, total_price)) +
        scale_x_continuous(breaks = unique(sales_by_year$order_year)) +
        scale_y_continuous(breaks = breaks, labels = breaks_labels) +
        xlab("Year") +
        ylab("Total Sales") +
        labs(title = "Sales by year", subtitle = input$country) +
        theme_light()
    })
  },
  options = list(height = 200)
)
```

## Adding click-through 
*Using `ggiraph` to add click-through interactivity to the app*

1. Load the `ggiraph` library

```{r}
library(ggiraph)
```

2. In the Shiny app's code, do the following:
- Replace `plotOUtput()` with `girafeOutput()`
- Replace `renderPlot()` with `renderGirafe()`
- Replace `geom_col()` with `geom_col_interactive()` 
-  In `geom_col_interactive()` add the following arguments: 
    - `data_id` = `order_year` 
    - `tooltip` = `total_price`
- Load the `ggplot` code to a variable called `g`
- Insert `girafe(ggobj = g)` as the last code in the output's code

```{r}
#| eval: false

shinyApp(
  ui = fluidPage(
    selectInput("country", "Country:", choices = countries, selected = "FRANCE"),
    girafeOutput("sales_plot")
  ),
  server = function(input, output) {
    output$sales_plot <- renderGirafe({
      sales_by_year <- prep_orders %>%
        filter(n_name == !!input$country) %>%
        group_by(order_year) %>%
        summarise(
          total_price = sum(o_totalprice, na.rm = TRUE)
        ) %>%
        collect()

      breaks <- as.double(quantile(c(0, max(sales_by_year$total_price))))
      breaks_labels <- paste(round(breaks / 1000000000, 1), "B")

      g <- sales_by_year %>%
        ggplot() +
        geom_col_interactive(aes(order_year, total_price, data_id = order_year, tooltip = total_price)) +
        scale_x_continuous(breaks = unique(sales_by_year$order_year)) +
        scale_y_continuous(breaks = breaks, labels = breaks_labels) +
        xlab("Year") +
        ylab("Total Sales") +
        labs(title = "Sales by year", subtitle = input$country) +
        theme_light()

      girafe(ggobj = g)
    })
  },
  options = list(height = 200)
)
```

```{r}
#| eval: false

shinyApp(
  ui = fluidPage(
    selectInput("country", "Country:", choices = countries, selected = "FRANCE"),
    girafeOutput("sales_plot")
  ),
  server = function(input, output) {
    output$sales_plot <- renderGirafe({
      sales_by_year <- prep_orders %>%
        filter(n_name == !!input$country) %>%
        group_by(order_year) %>%
        summarise(
          total_price = sum(o_totalprice, na.rm = TRUE)
        ) %>%
        collect()

      breaks <- as.double(quantile(c(0, max(sales_by_year$total_price))))
      breaks_labels <- paste(round(breaks / 1000000000, 1), "B")

      g <- sales_by_year %>%
        ggplot() +
        geom_col_interactive(aes(order_year, total_price, data_id = order_year, tooltip = total_price)) +
        scale_x_continuous(breaks = unique(sales_by_year$order_year)) +
        scale_y_continuous(breaks = breaks, labels = breaks_labels) +
        xlab("Year") +
        ylab("Total Sales") +
        labs(title = "Sales by year", subtitle = input$country) +
        theme_light()

      girafe(ggobj = g)
    })

    observeEvent(input$sales_plot_selected, {
      showModal(
        modalDialog(
          title = paste0(input$country, " - ", input$sales_plot_selected)
        )
      )
    })
  },
  options = list(height = 200)
)
```

```{r}
#| eval: false

shinyApp(
  ui = fluidPage(
    selectInput("country", "Country:", choices = countries, selected = "FRANCE"),
    girafeOutput("sales_plot")
  ),
  server = function(input, output) {
    output$sales_plot <- renderGirafe({
      sales_by_year <- prep_orders %>%
        filter(n_name == !!input$country) %>%
        group_by(order_year) %>%
        summarise(
          total_price = sum(o_totalprice, na.rm = TRUE)
        ) %>%
        collect()

      breaks <- as.double(quantile(c(0, max(sales_by_year$total_price))))
      breaks_labels <- paste(round(breaks / 1000000000, 1), "B")

      g <- sales_by_year %>%
        ggplot() +
        geom_col_interactive(aes(order_year, total_price, data_id = order_year, tooltip = total_price)) +
        scale_x_continuous(breaks = unique(sales_by_year$order_year)) +
        scale_y_continuous(breaks = breaks, labels = breaks_labels) +
        xlab("Year") +
        ylab("Total Sales") +
        labs(title = "Sales by year", subtitle = input$country) +
        theme_light()

      girafe(ggobj = g, options = list(opts_selection(type = "single")))
    })

    observeEvent(input$sales_plot_selected, {
      showModal(
        modalDialog(
          title = paste0(input$country, " - ", input$sales_plot_selected)
        )
      )
    })
  },
  options = list(height = 200)
)
```

```{r}
#| eval: false

shinyApp(
  ui = fluidPage(
    selectInput("country", "Country:", choices = countries, selected = "FRANCE"),
    girafeOutput("sales_plot")
  ),
  server = function(input, output) {
    output$sales_plot <- renderGirafe({
      sales_by_year <- prep_orders %>%
        filter(n_name == !!input$country) %>%
        group_by(order_year) %>%
        summarise(
          total_price = sum(o_totalprice, na.rm = TRUE)
        ) %>%
        collect()

      breaks <- as.double(quantile(c(0, max(sales_by_year$total_price))))
      breaks_labels <- paste(round(breaks / 1000000000, 1), "B")

      g <- sales_by_year %>%
        ggplot() +
        geom_col_interactive(aes(order_year, total_price, data_id = order_year, tooltip = total_price)) +
        scale_x_continuous(breaks = unique(sales_by_year$order_year)) +
        scale_y_continuous(breaks = breaks, labels = breaks_labels) +
        xlab("Year") +
        ylab("Total Sales") +
        labs(title = "Sales by year", subtitle = input$country) +
        theme_light()

      girafe(ggobj = g, options = list(opts_selection(type = "single")))
    })

    output$monthly_sales <- renderPlot({
      sales_by_month <- prep_orders %>%
        filter(n_name == !!input$country, order_year == !!input$sales_plot_selected) %>%
        group_by(order_month) %>%
        summarise(
          total_price = sum(o_totalprice, na.rm = TRUE)
        ) %>%
        collect()

      breaks <- as.double(quantile(c(0, max(sales_by_month$total_price))))
      breaks_labels <- paste(round(breaks / 1000000000, 1), "B")

      sales_by_month %>%
        ggplot() +
        geom_col(aes(order_month, total_price)) +
        scale_x_continuous(breaks = unique(sales_by_month$order_month)) +
        scale_y_continuous(breaks = breaks, labels = breaks_labels) +
        xlab("Year") +
        ylab("Total Sales") +
        labs(title = "Sales by month", subtitle = paste0(input$country, " - ", input$sales_plot_selected)) +
        theme_light()
    })

    observeEvent(input$sales_plot_selected, {
      showModal(
        modalDialog(
          title = paste0(input$country, " - ", input$sales_plot_selected),
          plotOutput("monthly_sales")
        )
      )
    })
  },
  options = list(height = 200)
)
```
