---
title: "More about dplyr and dbplyr"
execute: 
  eval: true
  freeze: true
---

```{r, setup}
#| include: false

library(dplyr)
library(dbplyr)
```

## Catch up {.unnumbered}

```{r}
library(dplyr)
library(dbplyr)
library(DBI)

con <- dbConnect(
  odbc::databricks(),
  HTTPPath = "/sql/1.0/warehouses/300bd24ba12adf8e"
)

tbl_diamonds <- tbl(con, "diamonds")
```

## Data collection
*Understand the difference between printing and collecting*


1. Call the `tbl_diamonds` variable directly

```{r}
tbl_diamonds
```

2. Call `tbl_diamonds` via `print()`.

```{r}
print(tbl_diamonds)
```

3. Call `tbl_diamonds` via `collect()`. Notice it prints the **entire** table 

```{r}
collect(tbl_diamonds)
```

4. Load the previous operation to a variable named `local_diamonds`

```{r}
local_diamonds <- collect(tbl_diamonds)
```

5. Use `pull()` to extract the values from `price` only

```{r}
#| eval: false
tbl_diamonds |> 
  pull(price)
```

6. Load the previous operation to a variable named `price`. Notice that this time,
the variable is a vector, not a data frame.

```{r}
price <- tbl_diamonds |> 
  pull(price)
```

## Referring to non-default catalog tables
*Using I() to create non-default table references*

1. Create a reference to the `customer` table, which is under the `tpch` schema, 
inside the `samples` catalog

```{r}
tbl(con, I("samples.tpch.customer"))
```

2. Create a reference to the `sales_order_in_la` table, under the `ferit` schema

```{r}
tbl(con, I("ferit.sales_order_in_la"))
```

## Selecting variables
*Simple strategies to order, and reduce, data to work with*

1. Load the `customer` table to a variable called `customer` 

```{r}
customer <- tbl(con, I("samples.tpch.customer"))
```
2. Select all columns that end with "key"

```{r}
customer |> 
  select(ends_with("key"))
```

3. Move all columns that end with "key" to the front

```{r}
customer |> 
  select(ends_with("key"), everything())
```

4. Select all columns that **do not** end with "key"

```{r}
customer |> 
  select(-ends_with("key"))
```


## Join to tables
**Using left_join() to relate two tables**

1. Load the `nation` table into a variable called the same

```{r}
nation <- tbl(con, I("samples.tpch.nation"))
```

2. Use `left_join` to relate `customer` with `nation` using the nation key 

```{r}
customer |> 
  left_join(nation, by = c("c_nationkey" = "n_nationkey"))
```

3. What are the 5 countries with the most customers?

```{r}
customer |> 
  left_join(nation, by = c("c_nationkey" = "n_nationkey")) |> 
  count(n_name, sort = TRUE) |> 
  head(5)
```
