---
title: "More about dplyr and dbplyr"
execute: 
  eval: true
  freeze: true
---

```{r, setup}
#| include: false
library(dplyr)
library(dbplyr)
library(DBI)
```

## Data collection
*Understand the difference between printing and collecting*

0. Catch up

```{r}
library(dplyr)
library(dbplyr)
library(DBI)

con <- dbConnect(
  odbc::databricks(),
  HTTPPath = "/sql/1.0/warehouses/300bd24ba12adf8e"
)

tbl_diamonds <- tbl(con, "diamonds")
```


1. Call the `tbl_diamonds` variable directly

```{r}
tbl_diamonds
```

2. Call `tbl_diamonds` via `print()`.

```{r}
print(tbl_diamonds)
```

3. Call `tbl_diamonds` via `collect()`. Notice it prints the **entire** table 

```{r}
collect(tbl_diamonds)
```

4. Load the previous operation to a variable named `local_diamonds`

```{r}
local_diamonds <- collect(tbl_diamonds)
```

5. Use `pull()` to extract the values from `price` only

```{r}
#| eval: false
tbl_diamonds %>% 
  pull(price)
```

6. Load the previous operation to a variable named `price`. Notice that this time,
the variable is a vector, not a data frame.

```{r}
price <- tbl_diamonds %>% 
  pull(price)
```

