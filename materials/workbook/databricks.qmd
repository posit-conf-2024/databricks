---
title: "Databricks Connect"
execute: 
  eval: true
  freeze: true
  warning: false
---

```{r, setup}
#| include: false

library(dplyr)
library(dbplyr)
library(sparklyr)
```

## Connect to Databricks Connect cluster


```{r}
library(sparklyr)
library(dplyr)
sc <- spark_connect(method = "databricks_connect")
```

## Uploading data from R

1. Load the `nycflights13` library

```{r}
library(nycflights13)
```

2. Use `copy_to()` to upload `planes` to your Spark session. Assign to a variable
called `tbl_planes`

```{r}
tbl_planes <- copy_to(sc, planes)
```

3. Use `glimpse()` to preview the data 

```{r}
tbl_planes |> 
  glimpse()
```

4. Use `show_query()` to see how Spark refers to the data you just uploaded

```{r}
tbl_planes |> 
  show_query()
```

## Caching data

```{r}
tbl_diamonds <- tbl(sc, "diamonds")
```

```{r}
tbl_temp <- tbl_diamonds |> 
  select(cut, color, clarity, price) |> 
  compute()
```

```{r}
tbl_temp
```

```{r}
tbl_temp |> 
  show_query()
```

## Reading files

```{r}
tbl_airports <- spark_read_csv(
  sc = sc,
  name = "airports_csv",
  path = "/Volumes/workshops/nycflights/2013/airports.csv"
  )
```

```{r}
tbl_airports
```

```{r}
tbl_airports |> 
  show_query()
```

## "Mapping" files


```{r}
flights_mapped <- spark_read_csv(
  sc = sc,
  name = "mapped",
  path = "/Volumes/workshops/nycflights/2013/nycflights.csv",
  memory = FALSE
  )
```

```{r}
flights_mapped |> 
  glimpse()
```

```{r}
flights_mapped |> 
  count(carrier)
```

```{r}
sdf_sql(sc, "select * from mapped limit 10")
```

## Partial cache

```{r}
flights_ord <- flights_mapped |> 
  filter(dest == "ORD") |>  
  compute()
```

```{r}
flights_ord
```


```{r}
flights_ord |> 
  show_query()
```

## End game

```{r}
flights_select <- flights_mapped |> 
  select(tailnum, dest, origin, distance) 
```

```{r}
flights_select
```

```{r}
dest_airports <- tbl_airports |> 
  select(dest = faa, dest_name = name)
```

```{r}
dest_airports
```

```{r}
origin_airports <- tbl_airports |> 
  select(origin = faa, origin_name = name)
```

```{r}
origin_airports
```

```{r}
flights_select |> 
  head()
```


```{r}
flights_select |> 
  head() |> 
  left_join(dest_airports, by = "dest") 
```

```{r}
flights_select |> 
  head() |> 
  left_join(dest_airports, by = "dest") |> 
  left_join(origin_airports, by = "origin") 
```

```{r}
flights_select |> 
  head() |> 
  left_join(dest_airports, by = "dest") |> 
  left_join(origin_airports, by = "origin") |> 
  left_join(tbl_planes, by = "tailnum")
```

```{r}
flights_select |> 
  head() |> 
  left_join(dest_airports, by = "dest") |> 
  left_join(origin_airports, by = "origin") |> 
  left_join(tbl_planes, by = "tailnum") |> 
  mutate(dest_name = ifelse(is.na(dest_name), "Unknown", dest_name))
```

```{r}
flights_select |> 
  head() |> 
  left_join(dest_airports, by = "dest") |> 
  left_join(origin_airports, by = "origin") |> 
  left_join(tbl_planes, by = "tailnum") |> 
  mutate(
    dest_name = ifelse(is.na(dest_name), "Unknown", dest_name),
    origin_name = ifelse(is.na(origin_name), "Unknown", origin_name)
    )
```


```{r}
flights_select |> 
  head() |> 
  left_join(dest_airports, by = "dest") |> 
  left_join(origin_airports, by = "origin") |> 
  left_join(tbl_planes, by = "tailnum") |> 
  mutate(
    dest_name = ifelse(is.na(dest_name), "Unknown", dest_name),
    origin_name = ifelse(is.na(origin_name), "Unknown", origin_name),
    tailnum = ifelse(is.na(tailnum), "Unknown", tailnum)
    )
```

```{r}
flights_select |> 
  head() |> 
  left_join(dest_airports, by = "dest") |> 
  left_join(origin_airports, by = "origin") |> 
  left_join(tbl_planes, by = "tailnum") |> 
  mutate(
    dest_name = ifelse(is.na(dest_name), "Unknown", dest_name),
    origin_name = ifelse(is.na(origin_name), "Unknown", origin_name),
    tailnum = ifelse(is.na(tailnum), "Unknown", tailnum)
    ) |> 
  show_query()
```

```{r}
tbl_prep <- flights_select |> 
  left_join(dest_airports, by = "dest") |> 
  left_join(origin_airports, by = "origin") |> 
  left_join(tbl_planes, by = "tailnum") |> 
  mutate(
    dest_name = ifelse(is.na(dest_name), "Unknown", dest_name),
    origin_name = ifelse(is.na(origin_name), "Unknown", origin_name),
    tailnum = ifelse(is.na(tailnum), "Unknown", tailnum)
    ) |> 
  compute()
```

```{r}
tbl_prep |> 
  show_query()
```


