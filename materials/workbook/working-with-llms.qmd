---
title: "Working with LLMs in Databricks"
execute: 
  eval: false
  freeze: false
  warning: false
---

```{r, setup}
#| include: false

library(dplyr)
library(dbplyr)
```

## Catch up {.unnumbered}

```{r}
library(dplyr)
library(dbplyr)
library(DBI)

con <- dbConnect(
  odbc::databricks(),
  HTTPPath = "/sql/1.0/warehouses/300bd24ba12adf8e"
)

```

## Accessing AI functions
*Use the sentiment classification function*

1. Create a quick review table using the following code:

```{r}
reviews <- tribble(
  ~name,     ~review, 
  "adam",    "This is the best toaster I have ever bought",
  "berry",   "Toaster arrived broken, waiting for replancement",
  "charles", "The washing machine is as advertised, can't wait to use it",
  "dan",     "Not sure how to feel about this tevelision, nice brightness but bad definition"
) |> 
  mutate(order_no = row_number()) |> 
  select(order_no, everything())
```

2. Copy the `reviews` data frame to your SQL session. Assign it to a variable
called `tbl_reviews`

```{r}
tbl_reviews <- copy_to(con, reviews, overwrite = TRUE)
```

3. Create a new field called "sentiment", use `ai_analyze_sentiment()` to 
analyze the "review" field

```{r}
tbl_reviews |> 
  mutate(sentiment = ai_analyze_sentiment(review))
```

## Specify array
*Using array() to run the classification function*

1. Use `ai_classify()` to find out if we need to follow up with customer. The 
two options should be: 'order complete', and 'need follow up'. Use `array()`
as if you would be using the `c()` function. Name the new field "follow_up"

```{r}
tbl_reviews |> 
  mutate(
    follow_up = ai_classify(review, array("order complete", "need follow up"))
    )
```

2. Add a step that keeps only those orders that need follow up

```{r}
tbl_reviews |> 
  mutate(
    follow_up = ai_classify(review, array("order complete", "need follow up"))
    ) |> 
  filter(review == "need follow up")
```

## Process complex output
*Working STRUCT output from an 'ai' function*

1. 

```{r}
tbl_review <- tbl_reviews |> 
  mutate(product = ai_extract(review, array("product"))) |> 
  compute()
```

```{r}
tbl_review 
```

```{r}
tbl_review |> 
  show_query()
```

```{r}
tbl_review |> 
  mutate(product = as.character(product))
```

```{r}
tbl_review |> 
  mutate(product = tolower(as.character(product)))
```

```{r}
tbl_review |> 
  mutate(product = tolower(as.character(product))) |> 
  count(product)
```

