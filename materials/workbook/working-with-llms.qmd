---
title: "Working with LLMs in Databricks"
execute: 
  eval: false
  freeze: false
  warning: false
---

```{r, setup}
#| include: false

library(dplyr)
library(dbplyr)
```

## Catch up {.unnumbered}

```{r}
library(dplyr)
library(dbplyr)
library(DBI)

con <- dbConnect(
  odbc::databricks(),
  HTTPPath = "/sql/1.0/warehouses/300bd24ba12adf8e"
)

```

## Accessing AI functions
*Use the sentiment classification function*

1. Create a quick review table using the following code:

```{r}
reviews <- tribble(
  ~name,     ~review, 
  "adam",    "This is the best toaster I have ever bought",
  "berry",   "Toaster arrived broken, waiting for replancement",
  "charles", "The washing machine is as advertised, can't wait to use it",
  "dan",     "Not sure how to feel about this tevelision, nice brightness but bad definition"
) |> 
  mutate(order_no = row_number()) |> 
  select(order_no, everything())
```

2. Copy the `reviews` data frame to your SQL session

```{r}
tbl_reviews <- copy_to(con, reviews, overwrite = TRUE)
```

3. Create a new field called "sentiment", use `ai_analyze_sentiment()` to 
analyze the "review" field

```{r}
tbl_reviews |> 
  mutate(sentiment = ai_analyze_sentiment(review))
```

## Specify array

```{r}
tbl_reviews |> 
  mutate(follow_up = ai_classify(review, array("order complete", "need follow up"))) 
```

## Process complex output

```{r}
tbl_review <- tbl_reviews |> 
  mutate(product = ai_extract(review, array("product"))) |> 
  compute()
```

```{r}
tbl_review 
```

```{r}
tbl_review |> 
  show_query()
```

```{r}
tbl_review |> 
  mutate(product = as.character(product))
```

```{r}
tbl_review |> 
  mutate(product = tolower(as.character(product)))
```

```{r}
tbl_review |> 
  mutate(product = tolower(as.character(product))) |> 
  count(product)
```

