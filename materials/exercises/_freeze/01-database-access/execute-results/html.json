{
  "hash": "e5264abbfd847e19eabdf37a07ac90d3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Access a database\"\nexecute: \n  eval: true\n  freeze: true\n---\n\n\n## Connect to a database\n\n1. Click on the `Connections` tab\n\n1. Click on the `New Connection` button\n\n1. Select `Databricks Warehouse`\n\n1. Click OK\n\n## Explore the database using the RStudio IDE\n\n1. Expand the `samples` catalog\n\n1. Expand the `tpch` schema\n\n1. Expand the `customer` table\n\n1. Click on the table icon to the right of the `customer` table \n\n1. *(Optional)* Expand and explore the other tables\n\n1. Click on the *disconnect* icon to close the connection\n\n\n## List drivers and DSNs \n\n1. To get a list of drivers available in the server\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(odbc)\n\nodbcListDrivers()[1:2]\n#> [1] name      attribute\n#> <0 rows> (or 0-length row.names)\n```\n:::\n\n\n2. Click on the *ellipsis* button located in the **Files** tab\n\n3. Type: `/etc`\n\n4. Locate and open the `odbcinst.ini` file\n\n5. To see a list of DSNs available in the server\n\n::: {.cell}\n\n```{.r .cell-code}\nodbcListDataSources()\n#>        name                                                description\n#> 1 warehouse /Library/simba/spark/lib/libsparkodbc_sb64-universal.dylib\n```\n:::\n\n\n6. Using the *ellipsis* button again, navigate to `/etc/odbc.ini`\n\n## Connect to a database using code\n\n1. Run the following code to connect\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(DBI)\n\ncon <- dbConnect(odbc::odbc(), dsn = \"warehouse\")\n```\n:::\n\n\n2. Use `dbListTables()` to retrieve a list of tables\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbListTables(con)\n#>  [1] \"allergies\"                                                \n#>  [2] \"cars\"                                                     \n#>  [3] \"conditions\"                                               \n#>  [4] \"covid_stats\"                                              \n#>  [5] \"diamonds\"                                                 \n#>  [6] \"edgartest\"                                                \n#>  [7] \"encounters\"                                               \n#>  [8] \"forevertables\"                                            \n#>  [9] \"iris\"                                                     \n#> [10] \"lendingclub\"                                              \n#> [11] \"mytable\"                                                  \n#> [12] \"mytable3\"                                                 \n#> [13] \"neverchairs\"                                              \n#> [14] \"nevertables\"                                              \n#> [15] \"observations\"                                             \n#> [16] \"patients\"                                                 \n#> [17] \"people10m\"                                                \n#> [18] \"procedures\"                                               \n#> [19] \"providers\"                                                \n#> [20] \"sklearn_housing\"                                          \n#> [21] \"snotel_data\"                                              \n#> [22] \"test_write_table_new_ca1f2d28_2e14_4514_9d6e_2bd705b02c75\"\n#> [23] \"wx_data\"                                                  \n#> [24] \"sales_order_in_chicago\"                                   \n#> [25] \"sales_order_in_la\"                                        \n#> [26] \"sales_orders_cleaned\"                                     \n#> [27] \"sales_orders_raw\"\n```\n:::\n\n\n3. Use `dbGetQuery()` to run a quick query\n\n::: {.cell}\n\n```{.r .cell-code}\nodbc::dbGetQuery(con, \"SELECT * FROM samples.nyctaxi.trips LIMIT 10\")\n#>    tpep_pickup_datetime tpep_dropoff_datetime trip_distance fare_amount\n#> 1   2016-02-14 16:52:13   2016-02-14 17:16:04          4.94        19.0\n#> 2   2016-02-04 18:44:19   2016-02-04 18:46:00          0.28         3.5\n#> 3   2016-02-17 17:13:57   2016-02-17 17:17:55          0.70         5.0\n#> 4   2016-02-18 10:36:07   2016-02-18 10:41:45          0.80         6.0\n#> 5   2016-02-22 14:14:41   2016-02-22 14:31:52          4.51        17.0\n#> 6   2016-02-05 06:45:02   2016-02-05 06:50:26          1.80         7.0\n#> 7   2016-02-15 15:03:28   2016-02-15 15:18:45          2.58        12.0\n#> 8   2016-02-25 19:09:26   2016-02-25 19:24:50          1.40        11.0\n#> 9   2016-02-13 16:28:18   2016-02-13 16:36:36          1.21         7.5\n#> 10  2016-02-14 00:03:48   2016-02-14 00:10:24          0.60         6.0\n#>    pickup_zip dropoff_zip\n#> 1       10282       10171\n#> 2       10110       10110\n#> 3       10103       10023\n#> 4       10022       10017\n#> 5       10110       10282\n#> 6       10009       10065\n#> 7       10153       10199\n#> 8       10112       10069\n#> 9       10023       10153\n#> 10      10012       10003\n```\n:::\n\n\n4. Use the SQL chunk\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT * FROM samples.nyctaxi.trips LIMIT 10\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|tpep_pickup_datetime |tpep_dropoff_datetime | trip_distance| fare_amount| pickup_zip| dropoff_zip|\n|:--------------------|:---------------------|-------------:|-----------:|----------:|-----------:|\n|2016-02-14 16:52:13  |2016-02-14 17:16:04   |          4.94|        19.0|      10282|       10171|\n|2016-02-04 18:44:19  |2016-02-04 18:46:00   |          0.28|         3.5|      10110|       10110|\n|2016-02-17 17:13:57  |2016-02-17 17:17:55   |          0.70|         5.0|      10103|       10023|\n|2016-02-18 10:36:07  |2016-02-18 10:41:45   |          0.80|         6.0|      10022|       10017|\n|2016-02-22 14:14:41  |2016-02-22 14:31:52   |          4.51|        17.0|      10110|       10282|\n|2016-02-05 06:45:02  |2016-02-05 06:50:26   |          1.80|         7.0|      10009|       10065|\n|2016-02-15 15:03:28  |2016-02-15 15:18:45   |          2.58|        12.0|      10153|       10199|\n|2016-02-25 19:09:26  |2016-02-25 19:24:50   |          1.40|        11.0|      10112|       10069|\n|2016-02-13 16:28:18  |2016-02-13 16:36:36   |          1.21|         7.5|      10023|       10153|\n|2016-02-14 00:03:48  |2016-02-14 00:10:24   |          0.60|         6.0|      10012|       10003|\n\n</div>\n:::\n\n\n5. Use the `output.var` option to load results to a variable\n\n::: {.cell output.var='sql_top10'}\n\n```{.sql .cell-code}\nSELECT * FROM samples.nyctaxi.trips LIMIT 10\n```\n:::\n\n\n6. Test the variable\n\n::: {.cell}\n\n```{.r .cell-code}\nsql_top10\n#>    tpep_pickup_datetime tpep_dropoff_datetime trip_distance fare_amount\n#> 1   2016-02-14 16:52:13   2016-02-14 17:16:04          4.94        19.0\n#> 2   2016-02-04 18:44:19   2016-02-04 18:46:00          0.28         3.5\n#> 3   2016-02-17 17:13:57   2016-02-17 17:17:55          0.70         5.0\n#> 4   2016-02-18 10:36:07   2016-02-18 10:41:45          0.80         6.0\n#> 5   2016-02-22 14:14:41   2016-02-22 14:31:52          4.51        17.0\n#> 6   2016-02-05 06:45:02   2016-02-05 06:50:26          1.80         7.0\n#> 7   2016-02-15 15:03:28   2016-02-15 15:18:45          2.58        12.0\n#> 8   2016-02-25 19:09:26   2016-02-25 19:24:50          1.40        11.0\n#> 9   2016-02-13 16:28:18   2016-02-13 16:36:36          1.21         7.5\n#> 10  2016-02-14 00:03:48   2016-02-14 00:10:24          0.60         6.0\n#>    pickup_zip dropoff_zip\n#> 1       10282       10171\n#> 2       10110       10110\n#> 3       10103       10023\n#> 4       10022       10017\n#> 5       10110       10282\n#> 6       10009       10065\n#> 7       10153       10199\n#> 8       10112       10069\n#> 9       10023       10153\n#> 10      10012       10003\n```\n:::\n\n\n7. Disconnect from the database using `dbDisconnect()`\n\n::: {.cell}\n\n```{.r .cell-code}\ndbDisconnect(con)\n```\n:::\n\n\n## RStudio SQL Script\n\n*Try out the new SQL Script support in RStudio*\n\n1. Open the *query-example.sql* file\n\n1. Click the *Preview* button. It is located in the top-right area of the script\n\n1. In the script, change *customer* to *orders*\n\n1. Click on *Preview* again\n\n## Connect to a database without a DSN\n*A more complex way of connecting to a database https://solutions.posit.co/connections/db/databases/databricks/#using-the-odbcodbc-function*\n\n1. Use the following code to start a new connection that does not use the pre-defined DSN\n\n::: {.cell}\n\n```{.r .cell-code}\ncon <- dbConnect(\n  odbc::odbc(),\n  Driver = \"/Library/simba/spark/lib/libsparkodbc_sb64-universal.dylib\",\n  Host = Sys.getenv(\"DATABRICKS_HOST\"),\n  Port = 443,\n  AuthMech = 3,\n  HTTPPath = \"/sql/1.0/warehouses/300bd24ba12adf8e\",\n  Protocol = \"https\",\n  ThriftTransport = 2,\n  SSL = 1,\n  UID = \"token\",\n  PWD = Sys.getenv(\"DATABRICKS_TOKEN\")\n  )\n```\n:::\n\n\n2. Disconnect from the database using `dbDisconnect()`\n\n::: {.cell}\n\n```{.r .cell-code}\ndbDisconnect(con)\n```\n:::\n\n\n## Connect to a database without a DSN, a better option\n*A more complex way of connecting to a database https://solutions.posit.co/connections/db/databases/databricks/#using-the-new-odbcdatabricks-function*\n\n1. Use the newer `odbc::databricks()` as the driver, which automatically sets the\ndefaults for you\n\n::: {.cell}\n\n```{.r .cell-code}\ncon <- dbConnect(\n  odbc::databricks(),\n  HTTPPath = \"/sql/1.0/warehouses/300bd24ba12adf8e\"\n  )\n```\n:::\n\n\n2. Disconnect from the database using `dbDisconnect()`\n\n::: {.cell}\n\n```{.r .cell-code}\ndbDisconnect(con)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}