---
engine: knitr
---

```{r}
#| include: false
if(!("no_remote" %in% ls())) no_remote <- 1
```

# {background-image="assets/background/content-slide.svg" background-size="1700px" background-color="#2a7070"}

:::{.custom-unit-number}
Unit `r no_remote`
:::

:::{.custom-unit-title}
Remote <br/> processing 
<br/>
<br/>
:::


## [Approaches]{style="color:#666;"} {background-image="assets/background/slide-light.svg" background-size="1700px" background-color="white"}

:::{.columns}
:::{.column}
:::{.custom-subtitle}
Preferred
:::
:::
:::{.column}
:::{.custom-subtitle}
"Use in case of emergencies"
:::
:::
:::

![](assets/remote-processing/push-collect.png){.absolute top="255" left="150" width="500"}
![](assets/remote-processing/extract-data.png){.absolute top="350" left="950" width="500"}

## [SQL not practical]{style="color:#666;"} {background-image="assets/background/slide-light.svg" background-size="1700px" background-color="white"}

:::{.columns}
:::{.column}
:::{.incremental1}
:::{.custom-smaller .custom-closer}

- SQL language was not meant for exploratory data analysis
- "Cognitive cost" of switching between SQL and R 
- It is not as easy to plot, model, or present results in SQL as it is with R

:::
:::
:::

:::{.column}

```sql
select 'cut', 
avg('price') as 
'avg_price' 
from 'diamonds'
group by 'cut' 
order by 'avg_price'
desc
```

:::
:::

## [Use dplyr & dbplyr]{style="color:#666;"} {background-image="assets/background/slide-light.svg" background-size="1700px" background-color="white"}


![](assets/remote-processing/dplyr.png){.absolute top="0" left="1300" width="150"}
![](assets/remote-processing/dbplyr.png){.absolute top="0" left="1450" width="150"}

:::{.columns}
:::{.column width="40%"}
:::{.custom-closer .custom-smaller}
:::{.incremental1}
- Translates R code to SQL!
- 'Modularity' of piped code
- Guardrails against pulling all of the data 
- All your code is in R
:::
:::
:::
:::{.column width="60%"}
<br/>

:::{.custom-smaller}
```r
tbl(con, "diamonds") |> 
  group_by(cut) |> 
  summarise(
    avg_price = mean(price, na.rm = TRUE)
  ) |> 
  arrange(desc(avg_price))
```
:::

:::
:::

## [🔑 How does it work?]{style="color:#666;"} {background-image="assets/background/slide-light.svg" background-size="1700px" background-color="white"}

![](assets/remote-processing/dplyr.png){.absolute top="0" left="1300" width="150"}
![](assets/remote-processing/dbplyr.png){.absolute top="0" left="1450" width="150"}

:::{.columns}
:::{.column width="40%"}

:::{.custom-smaller}
:::{.incremental1}
- Creates a "virtual" table 
- Behaves like a regular data frame
- It contains no data
- It's a pointer to the database table
:::
:::

:::
:::{.column width="60%"}

<br/>

:::{.custom-smaller}
```r
tbl_diamonds <- tbl(con, “diamonds”)

tbl_diamonds |>
  count()

Source: SQL [1 x 1]
Database: Spark SQL 3.1.1[token@Spark SQL/hive_metastore]
   n
<int64>
1 53940
```
:::
:::
:::

## [🔑 How does it work?]{style="color:#666;"} {background-image="assets/background/slide-light.svg" background-size="1700px" background-color="white"}

![](assets/remote-processing/dplyr.png){.absolute top="0" left="1300" width="150"}
![](assets/remote-processing/dbplyr.png){.absolute top="0" left="1450" width="150"}

<br/>

:::{.columns}
:::{.column width="55%"}

:::{.custom-closer .custom-smaller}
:::{.incremental1}
- Create a variable in R without importing data
- SQL is sent **only** when data is requested
- Behind the scenes, translates code to SQL
:::
:::

:::
:::{.column width="45%"}

```r
tbl_diamonds |>
  count() |>
  show_query()

<SQL>
SELECT COUNT(*) AS ‘n’
FROM ‘diamonds’
```

:::
:::

## {background-image="assets/background/boxed-green.svg" background-size="1700px" background-color="#799857"}

:::{.custom-exercise}
Exercises `r no_remote`.1 - `r no_remote`.2
:::

## [PSA]{style="color:#666;"} {background-image="assets/background/slide-light.svg" background-size="1700px" background-color="white"}

:::{.custom-subtitle}
Please,please,please...don't pass a full query to `tbl()`
:::

<br/>

:::{.columns}
:::{.column width="4%"}
:::
:::{.column width="95%"}
[
**tbl**(con, "Select * from 'table' where x = 1")
]{style="font-size: 82px;font-family:Helvetica Neue; font-weight:150;"}
:::
:::

<br/><br/><br/>

## [PSA]{style="color:#666;"} {background-image="assets/background/slide-light.svg" background-size="1700px" background-color="white"}

:::{.custom-subtitle}
Please, please, please...don't pass a full query to `tbl()`
:::

:::{.columns}
:::{.column width="4%"}
:::
:::{.column width="95%"}
[
**tbl**(con, "Select * from 'table' where x = 1")
]{style="text-decoration: line-through; font-size: 82px;font-family:Helvetica Neue; font-weight:150;"}
:::
:::

:::{.columns}
:::{.column width="25%"}
:::
:::{.column width="75%"}

[
tbl_table <- **tbl**(con, "table") <br/>
x_1 <- tbl_table |> <br/>
[XX]{style="color: #fff;"}**filter**(x == 1) 
]{style="color:#666; font-family:Helvetica Neue; font-weight:200;font-size:70px; line-height: 0.8"} 
:::
:::


## [Data collection]{style="color:#666;"} {background-image="assets/background/slide-light.svg" background-size="1700px" background-color="white"}
:::{.custom-subtitle}
There are 3 commands that download data:
:::

:::{.columns}

:::{.column width="50%"}

:::{.custom-smaller .custom-closer}
- `print()` - Downloads the first 1K rows by default (Guardrails)
- `collect()` - Downloads **all** of the data
- `pull()` - Download **all** the data of a single field
:::
:::

:::{.column width="50%"}
[
tbl_cars <- **tbl**(con, "cars")<br/>
**print**(tbl_cars)<br/>
tbl_cars [#Print is implied]{style="color:#aaa"} <br/>
**collect**(tbl_cars) <br/>
**pull**(tbl_cars, mpg) 
]{style="color:#666; font-family:Helvetica Neue; font-weight:150;font-size:65px;line-height:1.2;"} 
:::
:::

## {background-image="assets/background/boxed-green.svg" background-size="1700px" background-color="#799857"}

:::{.custom-exercise}
Exercise `r no_remote`.3
:::

## [Databricks Unity Catalog (UC)]{style="color:#666;"} {background-image="assets/background/slide-light.svg" background-size="1700px" background-color="white"}

:::{.custom-subtitle}
Centralizes access control, auditing, lineage, and data discovery across workspaces.
:::

![](assets/remote-processing/object-model.png){.absolute top="280" left="300"}

::: footer
https://docs.databricks.com/en/data-governance/unity-catalog/index.html
:::

## [Accessing the UC]{style="color:#666;"} {background-image="assets/background/slide-light.svg" background-size="1700px" background-color="white"}

:::{.custom-subtitle}
*"diamonds"* can be accessed without specifying catalog and schema
:::

[
# Why do you work?! <br/>
]{style="color:#999; font-family:Helvetica Neue; font-weight:200;font-size:60px; line-height: 0.8"} 
[
**tbl**(con, "diamonds") 
]{style="color:#666; font-family:Helvetica Neue; font-weight:200;font-size:80px; line-height: 1.1"} 

![](assets/remote-processing/uc-default1.png){.absolute top="280" left="800" width="850"}

## [Accessing the UC]{style="color:#666;"} {background-image="assets/background/slide-light.svg" background-size="1700px" background-color="white"}

:::{.custom-subtitle}
*"hive_metastore"* & *"default"* are the default catalog & schema respectively 
:::

[
# Oooh, that's why! <br/>
]{style="color:#999; font-family:Helvetica Neue; font-weight:200;font-size:60px; line-height: 0.8"} 
[
**tbl**(con, "diamonds") 
]{style="color:#666; font-family:Helvetica Neue; font-weight:200;font-size:80px; line-height: 1.1"} 

![](assets/remote-processing/uc-default2.png){.absolute top="280" left="800" width="850"}

## [Non-default catalog]{style="color:#666;"} {background-image="assets/background/slide-light.svg" background-size="1700px" background-color="white"}

:::{.custom-subtitle}
How do I access tables not in the default catalog?
:::

:::{.custom-closer}
[
**tbl**(con, "customer") 
]{style="color:#666; font-family:Helvetica Neue; font-weight:200;font-size:70px;"} 
<br/>
[
x (31740) Table or view not found: ..customer
]{style="color:#bc544b; font-family:Helvetica Neue; font-weight:400;font-size:35px; line-height: 1.1"} 
:::

![](assets/remote-processing/uc-customer.png){.absolute top="210" left="820" width="820"}

## [Non-default catalog]{style="color:#666;"} {background-image="assets/background/slide-light.svg" background-size="1700px" background-color="white"}

:::{.custom-subtitle}
How do I access tables not in the default catalog?
:::

:::{.custom-closer}
[
**tbl**(con, "customer") 
]{style="color:#666; font-family:Helvetica Neue; font-weight:200;font-size:70px;"} 
<br/>
[
x (31740) Table or view not found: ..customer
]{style="color:#bc544b; font-family:Helvetica Neue; font-weight:400;font-size:35px; line-height: 1.1"} 
<br/><br/>
[
**tbl**(<br/>
[X]{style="color: #fff;"}con, <br/>
[X]{style="color: #fff;"}"workshops.tpch.customer"<br/>
[X]{style="color: #fff;"})<br/>
]{style="color:#666; font-family:Helvetica Neue; font-weight:200;font-size:65px; line-height: 1.1"} 
[
x (31740) Table or view not found: ..workshops.tpch.<br/>customer
]{style="color:#bc544b; font-family:Helvetica Neue; font-weight:400;font-size:35px; line-height: 1.1"} 
:::

![](assets/remote-processing/uc-customer.png){.absolute top="210" left="820" width="820"}


## [Non-default catalog]{style="color:#666;"} {background-image="assets/background/slide-light.svg" background-size="1700px" background-color="white"}

:::{.custom-subtitle}
Use `I()` to create the correct table reference
:::
[
**tbl**(<br/>
[X]{style="color: #fff;"}con, <br/>
[X]{style="color: #fff;"}**I**("workshops.tpch.customer")<br/>
[X]{style="color: #fff;"})<br/>
]{style="color:#666; font-family:Helvetica Neue; font-weight:200;font-size:60px; line-height: 1.1"} 

![](assets/remote-processing/uc-customer.png){.absolute top="210" left="820" width="820"}

:::{.footer}
https://www.tidyverse.org/blog/2024/04/dbplyr-2-5-0/#referring-to-tables-in-a-schema
:::

## {background-image="assets/background/boxed-green.svg" background-size="1700px" background-color="#799857"}

:::{.custom-exercise}
Exercise `r no_remote`.4
:::
