{
  "hash": "767c29f358b637ba6930f7c5ed9fd273",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Modeling\"\nexecute: \n  eval: true\n  freeze: true\n  warning: false\n---\n\n\n\n\n\n\n## Catch up {.unnumbered}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sparklyr)\nlibrary(dplyr)\nsc <- spark_connect(method = \"databricks_connect\")\n```\n:::\n\n\n\n\n## Get sample of data\n*Download a sampled data set locally to R*\n\n1. Create a pointer to the `lendingclub` data. It is in the `samples` schema\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlendingclub_dat <- tbl(sc, I(\"workshops.samples.lendingclub\"))\n```\n:::\n\n\n\n\n2. Using `slice_sample()`, download 2K records, and name it `lendingclub_sample`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlendingclub_sample <- lendingclub_dat |>  \n  slice_sample(n = 2000) |> \n  collect()\n```\n:::\n\n\n\n\n3. Preview the data using the `View()` command\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nView(lendingclub_sample)\n```\n:::\n\n\n\n\n4. Keep only `int_rate`, `term`, `bc_util`, `bc_open_to_buy` and `all_util` \nfields. Remove the percent sign out of `int_rate`, and coerce it to numeric. \nSave resulting table to a new variable called `lendingclub_prep`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlendingclub_prep <- lendingclub_sample |> \n  select(int_rate, term, bc_util, bc_open_to_buy, all_util) |> \n  mutate(\n    int_rate = as.numeric(stringr::str_remove(int_rate, \"%\"))\n    )\n```\n:::\n\n\n\n\n5. Preview the data using `glimpse()`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(lendingclub_prep)\n#> Rows: 2,000\n#> Columns: 5\n#> $ int_rate       <dbl> 14.07, 12.61, 10.90, 9.58, 7.96, 5.31, 10.56, 18.45, 5.…\n#> $ term           <chr> \"36 months\", \"60 months\", \"36 months\", \"36 months\", \"36…\n#> $ bc_util        <dbl> 8.5, 84.2, 95.4, 0.4, 16.6, 25.0, 28.3, 32.7, 53.6, 10.…\n#> $ bc_open_to_buy <dbl> 21232, 835, 278, 20919, 37946, 41334, 17721, 64335, 343…\n#> $ all_util       <dbl> 9, 61, 80, 61, 44, 29, 62, 33, 44, 19, 38, 37, 69, 29, …\n```\n:::\n\n\n\n\n6. Disconnect from Spark\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspark_disconnect(sc)\n```\n:::\n\n\n\n\n\n## Create model using `tidymodels`\n\n1. Run the following code to create a `workflow` that contains the pre-processing\nsteps, and a linear regression model\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidymodels)\n\nlendingclub_rec <- recipe(int_rate ~ ., data = lendingclub_prep) |> \n  step_mutate(term = trimws(substr(term, 1,2))) |> \n  step_mutate(across(everything(), as.numeric)) |> \n  step_normalize(all_numeric_predictors()) |>\n  step_impute_mean(all_of(c(\"bc_open_to_buy\", \"bc_util\"))) |>   \n  step_filter(!if_any(everything(), is.na))\n\n\nlendingclub_lr <- linear_reg()\n\nlendingclub_wf <- workflow() |> \n  add_model(lendingclub_lr) |> \n  add_recipe(lendingclub_rec)\n\nlendingclub_wf\n#> ══ Workflow ════════════════════════════════════════════════════════════════════\n#> Preprocessor: Recipe\n#> Model: linear_reg()\n#> \n#> ── Preprocessor ────────────────────────────────────────────────────────────────\n#> 5 Recipe Steps\n#> \n#> • step_mutate()\n#> • step_mutate()\n#> • step_normalize()\n#> • step_impute_mean()\n#> • step_filter()\n#> \n#> ── Model ───────────────────────────────────────────────────────────────────────\n#> Linear Regression Model Specification (regression)\n#> \n#> Computational engine: lm\n```\n:::\n\n\n\n2. Fit the model in the workflow, now in a variable called `lendingclub_wf`, with\nthe `lendingclub_prep` data\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlendingclub_fit <- lendingclub_wf |> \n  fit(data = lendingclub_prep)\n```\n:::\n\n\n\n\n3. Measure the performance of the model using `metrics()`. Make sure to use\n`augment()` to add the predictions first\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlendingclub_fit |> \n  augment(lendingclub_prep) |> \n  metrics(int_rate, .pred)\n#> # A tibble: 3 × 3\n#>   .metric .estimator .estimate\n#>   <chr>   <chr>          <dbl>\n#> 1 rmse    standard       4.18 \n#> 2 rsq     standard       0.307\n#> 3 mae     standard       3.26\n```\n:::\n\n\n\n\n4. Run a histogram over the predictions\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\npredict(lendingclub_fit, lendingclub_sample) |> \n  ggplot() +\n  geom_histogram(aes(.pred))\n```\n\n::: {.cell-output-display}\n![](r-udfs-modeling_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n\n## Using Vetiver\n*Convert the workflow into a `vetiver` model*\n\n1. Load the `vetiver` package\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(vetiver)\n```\n:::\n\n\n\n\n2. Convert to Vetiver using `vetiver_model()`. Name the variable `lendingclub_vetiver`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlendingclub_vetiver <- vetiver_model(lendingclub_fit, \"lendingclub_model\")\n```\n:::\n\n\n\n\n3. Save `lendingclub_vetiver` as \"lendingclub.rds\"\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsaveRDS(lendingclub_vetiver, \"lendingclub.rds\")\n```\n:::\n\n\n\n\n## Create prediction function\n*Creating a self-contained prediction function that will read the model, and then run the predictions*\n\n1. Create a very simple function that takes `x`, and it assumes it will be a \ndata frame. Inside the function, it will read the \"lendingclub.rds\" file, and\nthen use it to predict against `x`. Name the function `predict_vetiver`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npredict_vetiver <- function(x) {\n  model <- readRDS(\"lendingclub.rds\")  \n  predict(model, x)\n}\n```\n:::\n\n\n\n\n2. Test the `predict_vetiver` function against `lendingclub_prep`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npredict_vetiver(lendingclub_prep)\n#> # A tibble: 2,000 × 1\n#>    .pred\n#>    <dbl>\n#>  1  8.35\n#>  2 17.3 \n#>  3 14.2 \n#>  4 10.1 \n#>  5  8.77\n#>  6  8.22\n#>  7 10.9 \n#>  8  7.14\n#>  9 11.8 \n#> 10  8.00\n#> # ℹ 1,990 more rows\n```\n:::\n\n\n\n\n3. Modify the function, so that it will add the predictions back to `x`. The\nnew variable should be named `ret_pred`. The function should output the \nmodified `x`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npredict_vetiver <- function(x) {\n  model <- readRDS(\"lendingclub.rds\")  \n  preds <- predict(model, x)\n  x$rate_pred <- preds$`.pred`\n  x\n}\n```\n:::\n\n\n\n\n4. Test the `predict_vetiver` function against `lendingclub_prep`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npredict_vetiver(lendingclub_prep)\n#> # A tibble: 2,000 × 6\n#>    int_rate term      bc_util bc_open_to_buy all_util rate_pred\n#>       <dbl> <chr>       <dbl>          <dbl>    <dbl>     <dbl>\n#>  1    14.1  36 months     8.5          21232        9      8.35\n#>  2    12.6  60 months    84.2            835       61     17.3 \n#>  3    10.9  36 months    95.4            278       80     14.2 \n#>  4     9.58 36 months     0.4          20919       61     10.1 \n#>  5     7.96 36 months    16.6          37946       44      8.77\n#>  6     5.31 36 months    25            41334       29      8.22\n#>  7    10.6  36 months    28.3          17721       62     10.9 \n#>  8    18.4  36 months    32.7          64335       33      7.14\n#>  9     5.31 36 months    53.6           3434       44     11.8 \n#> 10     7.46 36 months    10.9          33668       19      8.00\n#> # ℹ 1,990 more rows\n```\n:::\n\n\n\n\n5. At the beginning of the function, load the `workflows` and `vetiver` libraries\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npredict_vetiver <- function(x) {\n  library(workflows)\n  library(vetiver)\n  model <- readRDS(\"lendingclub.rds\")  \n  preds <- predict(model, x)\n  x$rate_pred <- preds$`.pred`\n  x\n}\n```\n:::\n\n\n\n\n6. Test the `predict_vetiver` function against `lendingclub_prep`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npredict_vetiver(lendingclub_prep)\n#> # A tibble: 2,000 × 6\n#>    int_rate term      bc_util bc_open_to_buy all_util rate_pred\n#>       <dbl> <chr>       <dbl>          <dbl>    <dbl>     <dbl>\n#>  1    14.1  36 months     8.5          21232        9      8.35\n#>  2    12.6  60 months    84.2            835       61     17.3 \n#>  3    10.9  36 months    95.4            278       80     14.2 \n#>  4     9.58 36 months     0.4          20919       61     10.1 \n#>  5     7.96 36 months    16.6          37946       44      8.77\n#>  6     5.31 36 months    25            41334       29      8.22\n#>  7    10.6  36 months    28.3          17721       62     10.9 \n#>  8    18.4  36 months    32.7          64335       33      7.14\n#>  9     5.31 36 months    53.6           3434       44     11.8 \n#> 10     7.46 36 months    10.9          33668       19      8.00\n#> # ℹ 1,990 more rows\n```\n:::\n\n\n\n\n## Predict in Spark\n*Run the predictions in Spark against the entire data set*\n\n\n1. Add conditional statement that reads the RDS file if it's available locally,\nand if not, read it from: \"/Volumes/workshops/models/vetiver/lendingclub.rds\"\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npredict_vetiver <- function(x) {\n  library(workflows)\n  library(vetiver)\n  if(file.exists(\"lendingclub.rds\")) {\n    model <- readRDS(\"lendingclub.rds\")  \n  } else {\n    model <- readRDS(\"/Volumes/workshops/models/vetiver/lendingclub.rds\")\n  }\n  preds <- predict(model, x)\n  x$rate_pred <- preds$`.pred`\n  x\n}\n```\n:::\n\n\n\n\n2. Re-connect to your Spark cluster\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsc <- spark_connect(method = \"databricks_connect\")\n```\n:::\n\n\n\n\n3. Re-create a pointer to the `lendingclub` data. It is in the `samples` schema\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlendingclub_dat <- tbl(sc, I(\"workshops.samples.lendingclub\"))\n```\n:::\n\n\n\n\n4. Select the `int_rate`, `term`, `bc_util`, `bc_open_to_buy`, and `all_util` \nfields from `lendingclub_dat`. And then pass just the top rows (using `head()`)\nto `spark_apply()`. Use the updated `predict_vetiver` to run the model.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlendingclub_dat |> \n  select(int_rate, term, bc_util, bc_open_to_buy, all_util) |> \n  head() |> \n  spark_apply(predict_vetiver)\n#> # Source:   table<`sparklyr_tmp_table_ccf6db3c_0348_4246_8a93_765344c7f00a`> [6 x 6]\n#> # Database: spark_connection\n#>   int_rate term      bc_util bc_open_to_buy all_util rate_pred\n#>   <chr>    <chr>       <dbl>          <dbl>    <dbl>     <dbl>\n#> 1 20.39%   36 months    94              133       82     14.9 \n#> 2 13.06%   60 months    82            10021       70     17.2 \n#> 3 10.56%   60 months    34.5          41570       54     13.4 \n#> 4 6.83%    36 months     7.9          23119       47      9.43\n#> 5 17.47%   60 months    62.1          11686       57     16.0 \n#> 6 16.46%   36 months    92.2            380       75     14.6\n```\n:::\n\n\n\n\n5. Add the `columns` specification to the `spark_apply()` call\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlendingclub_dat |> \n  select(int_rate, term, bc_util, bc_open_to_buy, all_util) |> \n  head() |> \n  spark_apply(\n    predict_vetiver, \n    columns = \"int_rate string, term string, bc_util double, bc_open_to_buy double, all_util double, pred double\"\n    )\n#> # Source:   table<`sparklyr_tmp_table_63178bba_c8ea_4f0b_aa19_c3377c947124`> [6 x 6]\n#> # Database: spark_connection\n#>   int_rate term      bc_util bc_open_to_buy all_util  pred\n#>   <chr>    <chr>       <dbl>          <dbl>    <dbl> <dbl>\n#> 1 20.39%   36 months    94              133       82 14.9 \n#> 2 13.06%   60 months    82            10021       70 17.2 \n#> 3 10.56%   60 months    34.5          41570       54 13.4 \n#> 4 6.83%    36 months     7.9          23119       47  9.43\n#> 5 17.47%   60 months    62.1          11686       57 16.0 \n#> 6 16.46%   36 months    92.2            380       75 14.6\n```\n:::\n\n\n\n\n6. Append `compute()` to the end of the code, remove `head()`, and save the\nresults into a variable called `lendingclub_predictions`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlendingclub_predictions <- lendingclub_dat |> \n  select(int_rate, term, bc_util, bc_open_to_buy, all_util) |> \n  spark_apply(\n    predict_vetiver,\n    columns = \"int_rate string, term string, bc_util double, bc_open_to_buy double, all_util double, pred double\"\n    ) |> \n  compute()\n```\n:::\n\n\n\n\n7. Preview the `lendingclub_predictions` table\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlendingclub_predictions\n#> # Source:   table<`table_6ba184f8_9933_4bdd_88da_cc5f27fc4e91`> [?? x 6]\n#> # Database: spark_connection\n#>    int_rate term      bc_util bc_open_to_buy all_util  pred\n#>    <chr>    <chr>       <dbl>          <dbl>    <dbl> <dbl>\n#>  1 20.39%   36 months    94              133       82 14.9 \n#>  2 13.06%   60 months    82            10021       70 17.2 \n#>  3 10.56%   60 months    34.5          41570       54 13.4 \n#>  4 6.83%    36 months     7.9          23119       47  9.43\n#>  5 17.47%   60 months    62.1          11686       57 16.0 \n#>  6 16.46%   36 months    92.2            380       75 14.6 \n#>  7 19.42%   60 months    21.5           1099       12 13.5 \n#>  8 22.90%   60 months    36.1          30777       62 14.3 \n#>  9 5.31%    36 months    54.9           8576       71 12.7 \n#> 10 6.83%    36 months    12.4          53356       17  6.96\n#> # ℹ more rows\n```\n:::\n",
    "supporting": [
      "r-udfs-modeling_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}